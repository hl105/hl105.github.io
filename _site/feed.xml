<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-17T19:08:39-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Johanna’s blog</title><subtitle>A place where I document new discoveries in my computer science journey. (and a place where you can learn more about me!)</subtitle><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><entry><title type="html">cron tutorial</title><link href="http://localhost:4000/project/cron-tutorial/" rel="alternate" type="text/html" title="cron tutorial" /><published>2024-06-17T00:00:00-04:00</published><updated>2024-06-17T17:58:35-04:00</updated><id>http://localhost:4000/project/cron-tutorial</id><content type="html" xml:base="http://localhost:4000/project/cron-tutorial/"><![CDATA[<h3 id="setting-up-cron">setting up cron</h3>

<ul>
  <li>create scripts folder <code class="language-plaintext highlighter-rouge">mkdir scripts</code></li>
  <li>create your direction file <code class="language-plaintext highlighter-rouge">touch run_gtrends_politics.sh</code>  in it</li>
  <li>
    <p>write what you want to repeat in that shell script:</p>

    <p>if you don’t have virtual environments, you don’t need the env activation lines</p>

    <p><strong>example 1: if z shell &amp; conda</strong></p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c">#!/usr/bin/env zsh</span><span class="w">
	
  </span><span class="n">source</span><span class="w"> </span><span class="nx">~/.zshrc</span><span class="w"> </span><span class="c">#we need this</span><span class="w">
  </span><span class="n">echo</span><span class="w"> </span><span class="nv">$SHELL</span><span class="w">
  </span><span class="n">conda</span><span class="w"> </span><span class="nx">activate</span><span class="w"> </span><span class="nx">ml</span><span class="w">
  </span><span class="n">cd</span><span class="w">  </span><span class="nx">/Users/ihoonsun/Desktop/summer\</span><span class="w"> </span><span class="nx">projects/sci/summer2024/gtrends_politics</span><span class="w">
  </span><span class="n">python</span><span class="w"> </span><span class="nx">example_script.py</span><span class="w">
  </span><span class="n">conda</span><span class="w"> </span><span class="nx">deactivate</span><span class="w">
</span></code></pre></div>    </div>

    <p><strong>example 2: if bash shell &amp; venv:</strong></p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c">#!/bin/bash</span><span class="w">
  </span><span class="n">echo</span><span class="w"> </span><span class="nv">$SHELL</span><span class="w">
  </span><span class="n">export</span><span class="w"> </span><span class="nx">PATH</span><span class="o">=</span><span class="s2">"/Users/ihoonsun/environments/naver-venv/bin:</span><span class="nv">$PATH</span><span class="s2">"</span><span class="w">
  </span><span class="n">source</span><span class="w"> </span><span class="nx">/Users/ihoonsun/environments/naver-venv/bin/activate</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">[[</span><span class="w"> </span><span class="s2">"</span><span class="si">$(</span><span class="n">which</span><span class="w"> </span><span class="nx">python</span><span class="p">)</span><span class="s2">" == "</span><span class="n">/Users/ihoonsun/environments/naver-venv/bin/python</span><span class="s2">" ]]; then
      echo "</span><span class="nx">venv</span><span class="w"> </span><span class="nx">activated</span><span class="s2">"
  else
      echo "</span><span class="nx">failed</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">activate</span><span class="s2">"
  fi
  cd /Users/ihoonsun/Desktop/naver 
  /Users/ihoonsun/environments/naver-venv/bin/python3.8  -m pytest scraper.py --headless #run pytest
  deactivate
	
</span></code></pre></div>    </div>
  </li>
  <li>open shell configuration file and add  environment variables if needed
    <ul>
      <li>ex) your openai API key</li>
    </ul>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c">#directions</span><span class="w">
  </span><span class="c"># setting API_KEY environment variable</span><span class="w">
  </span><span class="c"># open shell configuration file  (~/.bashrc, ~/.bash_profile, or ~/.zshrc)</span><span class="w">
  </span><span class="c"># write: export API_KEY=your_api_key_value and save</span><span class="w">
  </span><span class="c"># check if it saved correctly by: echo $API_KEY</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">crontab -e</code>  to open crontab.</li>
  <li><code class="language-plaintext highlighter-rouge">0 7-23 * * * /Users/ihoonsun/scripts/run_pytest.sh</code> add to crontab</li>
  <li>you can check crontab with <code class="language-plaintext highlighter-rouge">crontab -l</code></li>
</ul>

<h3 id="qa-section">Q&amp;A section</h3>

<p><strong>problem</strong>: need to do conda init before you need to conda activate</p>

<p><strong>solution</strong>: <code class="language-plaintext highlighter-rouge">source ~/.bashrc</code>  → <code class="language-plaintext highlighter-rouge">conda init --all</code></p>

<hr />

<p><strong>problem</strong>: conda (base) shows up on terminal prompt</p>

<p><strong>solution</strong>: <code class="language-plaintext highlighter-rouge">conda config --set auto_activate_base False</code></p>

<hr />

<p><strong>problem</strong>: permissioned denied to some file</p>

<p><strong>solution:</strong> <code class="language-plaintext highlighter-rouge">chmod +x path/to/file</code> (chmod: command to change file permissions, +x: adds executable permission to file)</p>

<hr />

<p><strong>problem:</strong> editor isn’t nano</p>

<p><strong>solution</strong>: <code class="language-plaintext highlighter-rouge">export EDITOR=nano</code> (sets nano to default), for crontab→ <code class="language-plaintext highlighter-rouge">export VISUAL=nano</code></p>

<hr />

<p><strong>problem</strong>: command not found</p>

<p><strong>solution</strong>: check shebang (character sequence at the beginning of a script that specifies the path to the interpreter that should execute the script) &amp; <strong>source the z shell</strong> becaues cron jobs run in a much more limited environment compared to your interactive shell session, we need the .zshrc to be executed because it’s where we initialized conda</p>

<h3 id="extra-information-thank-you-stackoverflow-google-and-chatgpt">Extra information (thank you StackOverflow, Google, and chatGPT)</h3>

<ul>
  <li><strong>what is z shell / bash shell?</strong>
    <ul>
      <li>zsh: Unix shell that can be used as an interactive login shell and as a powerful command interpreter for shell scripting. Incorporates features of other shells such as <code class="language-plaintext highlighter-rouge">bash</code>, <code class="language-plaintext highlighter-rouge">ksh</code>, and <code class="language-plaintext highlighter-rouge">tcsh</code>, making it highly versatile and customizable.</li>
      <li>bash: another Unix shell and command language, which is the default shell on many Linux distributions and macOS. It is an improved version of the original Bourne shell (<code class="language-plaintext highlighter-rouge">sh</code>)</li>
    </ul>
  </li>
  <li><strong>what is Shebang</strong> <strong><code class="language-plaintext highlighter-rouge">#!</code></strong><strong>?</strong>
    <ul>
      <li>a character sequence at the beginning of a script that specifies the path to the interpreter that should execute the script. Is followed by the absolute path to the interpreter.</li>
      <li>example usage: <code class="language-plaintext highlighter-rouge">#!/usr/bin/env zsh</code>  ← telling system to use the <code class="language-plaintext highlighter-rouge">zsh</code> interpreter found by the <code class="language-plaintext highlighter-rouge">env</code> command in the user’s environment.</li>
    </ul>
  </li>
  <li>
    <p><strong>what’s that line of code we’re adding to crontab?</strong></p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">*</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">*</span><span class="w">  </span><span class="kr">command</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="nx">execute</span><span class="w">
  </span><span class="err">┬</span><span class="w"> </span><span class="err">┬</span><span class="w"> </span><span class="err">┬</span><span class="w"> </span><span class="err">┬</span><span class="w"> </span><span class="err">┬</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">└───</span><span class="w"> </span><span class="n">day</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="nx">week</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">7</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">Sunday</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">0</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">7</span><span class="p">)</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">└─────</span><span class="w"> </span><span class="n">month</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">12</span><span class="p">)</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">└───────</span><span class="w"> </span><span class="n">day</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="nx">month</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">31</span><span class="p">)</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">└─────────</span><span class="w"> </span><span class="n">hour</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">23</span><span class="p">)</span><span class="w">
  </span><span class="err">└───────────</span><span class="w"> </span><span class="n">minute</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">59</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="project" /><category term="tutorial" /><category term="scraping" /><summary type="html"><![CDATA[when you don't want to stay up all night collecting data]]></summary></entry><entry><title type="html">Statistical Testing (week 1)</title><link href="http://localhost:4000/r/statistical-testing-week-1/" rel="alternate" type="text/html" title="Statistical Testing (week 1)" /><published>2024-06-10T00:00:00-04:00</published><updated>2024-06-10T21:58:49-04:00</updated><id>http://localhost:4000/r/statistical-testing-week-1</id><content type="html" xml:base="http://localhost:4000/r/statistical-testing-week-1/"><![CDATA[<!--postNo: 2024-06-10-->

<h3 id="sampling-and-bias">sampling and bias</h3>

<ol>
  <li>unit:
    <ol>
      <li>thing we are studying</li>
      <li>often row in dataset</li>
      <li>ex) people, households, mic, bags of dirt</li>
    </ol>
  </li>
  <li>target population:
    <ol>
      <li>set of units you’d like to learn about</li>
      <li>ex) all Wellesley students, all US households, …</li>
    </ol>
  </li>
  <li>estimand:
    <ol>
      <li>a number that we wish we knew in order to answer the research question</li>
      <li>the estimand could be calculated in a straightforward way if we had data of every unit in the target population</li>
    </ol>
  </li>
  <li>Sampling:
    <ol>
      <li>the link between target population and the data you have</li>
    </ol>
  </li>
  <li>Census:
    <ol>
      <li>an attempt to collect info from <strong>all</strong> units in the target population</li>
      <li>ex) US Census</li>
      <li>problems: resource heavy, misses certain subgroups systematically — ex) homeless ppl</li>
      <li><strong>big data / data science</strong>: sometimes we <strong>can</strong> calculate the estimand because we do have all the units in target population</li>
    </ol>
  </li>
  <li>Sample population / sampling frame
    <ol>
      <li>def: set of units with some chance of being included in your dataset</li>
      <li>ex) households with phone numbers listed</li>
      <li>it is very possible for parts of sample population to not be in target population</li>
      <li>goal: choose a data collection method such that sample pop is as similar as possible to target population</li>
      <li><strong>sample</strong>:
        <ol>
          <li>set of units for which you attempt to collect data</li>
          <li>can be also used to describe units in your data set</li>
          <li>we have most control over choosing a sample from sample population</li>
        </ol>
      </li>
      <li><strong>respondents</strong>: set of units actually in your data set</li>
      <li>ex) interested in surveying Wellesley students. Puts all Wellesley students’ names in a hat and draws 50. But only 30 ppl responded when contacted
        <ol>
          <li>people in sample: 50.</li>
          <li>target population: all Wellesley students.</li>
          <li>sample population: all Wellesley students.</li>
          <li>respondents: 30 who responded</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>Sampling methods
    <ol>
      <li><strong>haphazard; convenience</strong> → likely not representable</li>
      <li><strong>simple random sample</strong> (SRS)
        <ol>
          <li>all units in sample pop are in a hat, a predetermined number of units is selected</li>
          <li>all subsets of size n have the same probability of being the sample</li>
          <li>SRS is default assumption for most common statistical methods</li>
        </ol>
      </li>
      <li><strong>stratified sampling</strong>: group units based on characteristics, take SRS from each group</li>
      <li><strong>cluster sampling:</strong> divide units into clusters, do a SRS on clusters (pick all of one cluster) → for convenience</li>
      <li><strong>systematic sampling:</strong> include every kth unit → sequential. ex) exit poll</li>
      <li><strong>Bernoulli Sampling</strong>: flip a coin for each unit to decide whether they are in your sample → sequential</li>
    </ol>
  </li>
  <li>Bias
    <ol>
      <li>non-response bias: respondents are not representative of sample</li>
      <li>selection bias: when the sample is not representative of the target population, because either -
        <ol>
          <li>sample population is not representative of target</li>
          <li>sample not rep of sample population</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>Comparing two groups, and summary table
    <ol>
      <li>Assigning units in sample to groups:
        <ol>
          <li>parallels sampling from a group</li>
          <li>goal is to create groups that are representative of each other</li>
          <li>haphazard or any of the random strategies we listed</li>
        </ol>
      </li>
      <li>assigning groups, sample from population:
        <ol>
          <li>if assigning group is random - infer causation.</li>
          <li>if sample from group is random - easy to generalize</li>
          <li>both random → very rare, but ideal</li>
          <li>not random, random → survey</li>
          <li>random, not random → lab experiments</li>
          <li>not random, not random → most studies</li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

<h3 id="intro-to-hypothesis-testing">Intro to Hypothesis Testing</h3>

<ol>
  <li>R.A. Fisher’s Lady tasting tea
    <ol>
      <li>8 cups of tea. 4 milk first, 4 tea first. Lady’s job is to pick out the 4 that was poured milk first</li>
      <li>possibilities: 4 correct, …, 0 correct</li>
    </ol>
  </li>
  <li>Counting:
    <ol>
      <li>4 correct → 1 way</li>
      <li>3 correct → 4x4 = 16 ways</li>
      <li>2 correct → 6x6=36 ways</li>
      <li>1 correct → 4x4 = 16 ways</li>
      <li>0 correct → 1 way</li>
    </ol>
  </li>
  <li>Comparing truth to distribution:
    <ol>
      <li>p-value: assuming the lady is guessing at random, the prob she should have gotten all 4 correct is 1/70.</li>
      <li>she did get all 4 correct! Evidence contradicts that she was guessing at random.</li>
    </ol>
  </li>
  <li>Hypothesis Tests:
    <ol>
      <li>data @ 2: reference distribution — we can check how extreme (surprising) is the value we actually saw?</li>
      <li>null hypothesis: assumption about target population</li>
      <li>test statistic: something you can calculate from the sample that you actually have</li>
    </ol>
  </li>
</ol>

<h3 id="intro-to-non-parametric-tests">Intro to Non-Parametric Tests</h3>

<ol>
  <li><strong>Defining terms:</strong>
    <ol>
      <li><strong>hypothesis tests</strong>: proof by contradiction</li>
      <li><strong>null Hypothesis</strong> (H_0): based on the assumption, typically that there is no effect or no pattern</li>
      <li><strong>statistic</strong>: number that can be calculated from data</li>
      <li><strong>test statistic</strong>: statistic used to calculate H_0</li>
      <li><strong>distribution</strong>: a list of possible values of a random numeric quantity, along with their probabilities</li>
      <li><strong>reference distribution</strong>: distribution of the test statistic, assuming H_0 is true.</li>
    </ol>
  </li>
  <li>Randomization test assuming simple random sample
    <ol>
      <li>HCAS harvard case example: of those offered help. 76% won. Of those not offered help, 72% won.</li>
      <li>pretend: only 3 ppl in study.</li>
      <li></li>
    </ol>
  </li>
</ol>

<table>
  <thead>
    <tr>
      <th>0</th>
      <th>0</th>
      <th>1 (won)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>help (T)</td>
      <td>no help (C)</td>
      <td>no help (C)</td>
    </tr>
    <tr>
      <td>C</td>
      <td>T</td>
      <td>C</td>
    </tr>
    <tr>
      <td>C</td>
      <td>C</td>
      <td>T</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>difference</p>

<ol>
  <li>diff: 0 (mean win rate for T)-0.5 (for C)=-0.5</li>
  <li>0-0.5 = -0.5</li>
  <li>1-0 = 1</li>
</ol>

<p>2/3 prob that get a diff of -0.5</p>

<p>1/3 prob that I get a diff of 1</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d. H_0: no impact of offer of help from HCAS on outcomes


e. Assume: SRS with one T and two C 
</code></pre></div></div>

<ol>
  <li>Bernoulli randomization and p-values
    <ol>
      <li>Bernoulli randomization means that you flip a coin for each unit, rather than drawing a prespecified number of units out of a hat.</li>
      <li>useful when units arrive one by one so you can’t randomize all at once.</li>
      <li>Assuming: Bernoulli randomization (not SRS)</li>
      <li></li>
    </ol>
  </li>
</ol>

<table>
  <thead>
    <tr>
      <th>0</th>
      <th>0</th>
      <th>1</th>
      <th> </th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>T</td>
      <td>C</td>
      <td>C</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>C</td>
      <td>T</td>
      <td>C</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>C</td>
      <td>C</td>
      <td>T</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>T</td>
      <td>T</td>
      <td>C</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>T</td>
      <td>C</td>
      <td>T</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>C</td>
      <td>T</td>
      <td>T</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td><del><em>T</em></del></td>
      <td><del><em>T</em></del></td>
      <td><del><em>T</em></del></td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td><del>C</del></td>
      <td><del>C</del></td>
      <td><del>C</del></td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>none of the p-vals are small — I won’t be surprised if something happens 1/2 of the time? no. This is because it’s a tiny dataset.</p>

<p>differences</p>

<p>0-0.5=-0.5</p>

<p>0-0.5=-0.5</p>

<p>1-0=1</p>

<p>0-1=-1</p>

<p>0.5-0=0.5</p>

<p>0.5-0=0.5</p>

<p><del>0.33-?? = ??</del></p>

<p><del>??-0.33 = ??</del></p>

<p>left side p-val: 3/6 = 1/2</p>

<p>right-side p-val: 5/6</p>

<p>one-sided: 1/2</p>

<p>two-sided: 1</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c. p-value:

- probability of observing a value of the statistic that is at least as extreme as actually observed, if H_0 is true.
- left-sided p-vaue: prob that test statistic is at least as small as actually observed, if H_0 true.
- right-side p-value: prob … at least as large …
- one-sided p-value: min(left, right)
- two-sided p-value: 2xone-sided value
- most common to report 2-sided p-value, but I should specify what p-value I’m reporting
- If p-value is small, perhaps H_0 is not true. “reject H_0”
- If p-value is big, no reason to doubt the null “failed to reject H_0”
- A common cutoff is 0.05, but not for any reason
- A p-value less then 0.01 or 0.001 is equivalent to 0 “p&lt;0.001” 4. Non-parametric test: next steps:
1. lots of assumptions
2. randomization test: take advantage of the fact that we randomized the test
3. permutation test is equivalent: apply the algo for randomization test for a situation where we did not randomize
4. benefits: useful for any sample scheme, any sample size. you can also use any test statistic. No distributional assumptions such as normality.
</code></pre></div></div>

<p>Q: Can we carry out the steps of a randomization test if the study was not actually randomized?</p>

<p>A: Yes. The steps in the test work perfectly will if the two groups were not created randomly. However, in that case we can’t justify the test by saying that each of these other randomizations could have occurred if the groups did not cause the outcome. Instead, we justify the test by saying that the group labels could have been allocated in any of these ways if the outcomes are not related to the groups.</p>

<h3 id="rank-sum-tests"><strong>Rank Sum Tests</strong></h3>

<ol>
  <li>Rank sum test
    <ol>
      <li>ex setup: suppose we compare the effectiveness of the old drug and the new drug. Suppose we measure how many months they lived after we assign the drugs. 4 ppl.</li>
      <li>2 ppl for old drug A lived 3, 7 months each</li>
      <li>new drug B lived 0, 12 months
        <ol>
          <li>3 7 0 12</li>
          <li>A A B B</li>
          <li>A B A B</li>
          <li>.. continue random allocation → make histogram of  difference of means → get p value</li>
        </ol>
      </li>
      <li>what if instead of 12 months, it’s &gt;12? (person’s still alive)…what do we do?</li>
    </ol>
  </li>
  <li>Rank sum test details
    <ol>
      <li>we can’t take mean of 0 and &gt; 12. so instead, w.t. transform our data so that we can represent &gt;12 in a useful way — convert to numbers rank in dataset.</li>
      <li>back to example
        <ol>
          <li>3 7 0 &gt;12 (assigned)</li>
          <li>2 3 1 4 (ranks) → T (add ranks of ppl in group A)</li>
          <li>A A B B → 5</li>
          <li>A B A B  → 3</li>
          <li>A B B A  → 6</li>
          <li>B B A A →  5</li>
          <li>B A B A  → 7</li>
          <li>B A A B → 4</li>
        </ol>
      </li>
      <li>T = sum of the ranks in the smaller group. We now have reference distribution!</li>
      <li>The randomization we actually saw (data) is the first row. → Q: are we surprised to see a rank sum of 5 if null is true? No! bc the 5 is the middle value i expect to see</li>
    </ol>
  </li>
  <li>Why sum of ranks?
    <ol>
      <li>the test statistics we used was sum of ranks instead of diff of means.</li>
      <li>suppose the values was 3 3 0 &gt; 12. Then you average the ranks: 2.5 2.5 1 4</li>
      <li>If I know there’s 4 nums, we know there are 4 ranks. If I know sum is 10 (1+2+3+4), and the sum of ranks in group A is 5, I know that the sum of ranks in group B is 5. So I just have to keep track of 1 group.</li>
    </ol>
  </li>
  <li>When to use the rank sum
    <ol>
      <li>when you have censored data (very common in medical data like &gt;12)</li>
      <li>when you have outliers: when you have 120000 instead of 12: if you take average with this, this outlier will completely drive the output. This rank sum test is resistant to outliers.</li>
      <li>when you have small dataset bc no assumptions (e.g. normal distribution). Other methods, like t-tests, estimate the reference distribution by making assumptions.</li>
    </ol>
  </li>
</ol>

<h3 id="more-non-parametric-tests">More Non-parametric Tests</h3>

<ol>
  <li>Ways to approximate the reference distribution, rather than calculating it exactly
    <ol>
      <li>exact method
        <ol>
          <li>(what we’ve been doing) listing all ways to allocate units into 2 groups. AAABB, AABAB, …</li>
          <li>problem: too many ways to allocate units</li>
        </ol>
      </li>
      <li>approximate exact:
        <ol>
          <li>take a SRS of the ways to allocate the units into 2 groups. Use those allocations only to produce an approximation to the exact reference distribution</li>
          <li>most common plan</li>
        </ol>
      </li>
      <li>normal approximation:
        <ol>
          <li>works sometimes, only if the mean and variance of the reference distribution is known ahead of time, and we know the reference distribution would be normal.</li>
          <li>workers for rank sum bc “expected value” E(T)  = n_1(N+1)/2, var(T) = n_1n_2(N+1)/12</li>
          <li>Y: -20, -11, 5,7, …, 2100, 3000</li>
          <li>rank: <em><strong>1, 2</strong></em>, 3, 4, <em><strong>5</strong></em>, …, 99, <em><strong>100</strong></em></li>
          <li>treat: A, A, B, A, …, A,B</li>
          <li>rank depends on N, not data values</li>
          <li>uniform reference distribution: we know the distribution (histogram) of the ranks without seeing the data → just flat bc there’s one of each rank</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>Central Limit Theorem
    <ol>
      <li>If you get the <strong>rank sum</strong> distributoin from the uniform <strong>rank</strong> distribution, it looks like a normal distribution.</li>
      <li>def: <strong>regardless of</strong> population distribution, sum of random samples will be approximately normally distributed (in most circumstances)</li>
      <li>but then why is it helpful that converting to ranks gives us a uniform distribution?</li>
      <li>CLT says when we draw a large sample from a data set and record the sum (or mean) of the values in the sample, if we repeatedly draw different samples, the sums (or means) will look approximately normal. However, the meaning of the word “large” depends on the distribution of the original data: the weirder the distribution, the larger sample size we need in order for the CLT to be true. So, the advantage of converting the data to ranks is that we know the uniform distribution is not too weird (no outliers, symmetric), and the CLT will work even for a small sample size.</li>
    </ol>
  </li>
  <li>Facts about rank sum
    <ol>
      <li>no distributional assumptions</li>
      <li>outliers are not a problem</li>
      <li>censoring not a problem</li>
      <li>randomization/permutation distribution depends on the sample size, not the data itself</li>
      <li>big or small sample size is fine</li>
      <li>when to avoid rank sum:
        <ol>
          <li>lots of ties</li>
        </ol>
      </li>
    </ol>
  </li>
</ol>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="R" /><category term="qai" /><category term="R" /><category term="lecture" /><summary type="html"><![CDATA[notes from week 1]]></summary></entry><entry><title type="html">R intro (week 0)</title><link href="http://localhost:4000/r/r-intro-week-0/" rel="alternate" type="text/html" title="R intro (week 0)" /><published>2024-06-03T00:00:00-04:00</published><updated>2024-06-03T23:08:41-04:00</updated><id>http://localhost:4000/r/r-intro-week-0</id><content type="html" xml:base="http://localhost:4000/r/r-intro-week-0/"><![CDATA[<!--postNo: 2024-06-03-->

<p><strong>QAI Program Week 0. Notebook and lecture from the Quantitative Analysis Institute Summer Program.</strong></p>

<h3 id="lecture---basic-r-commands">Lecture - Basic R commands</h3>

<ol>
  <li><strong>Vectors:</strong>
    <ol>
      <li>similar to numpy array</li>
      <li>ex) c(1,2,3,4,5) →  1  2  3  4  5,  c(1:3,5:12) →  1  2  3  5 10 11 12 (right inclusive)</li>
      <li>5:10 is valid; but (5:7, 8:10) is invalid bc you need c to combine two expressions</li>
      <li>length() to find len</li>
      <li>NA for None</li>
      <li>merge two vectors by c(vec1, vec2)</li>
      <li>exp(vec1), log(vec1) ← applies to all elements in vec</li>
    </ol>
  </li>
  <li><strong>Matrices:</strong>
    <ol>
      <li>ex) mat1 = matrix(3,nrow=2, ncol=2) #matrix with all 3s</li>
      <li>dim(mat1), nrow(mat1), ncol(mat1)</li>
      <li>
        <p>rows and columns</p>

        <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="o">?</span><span class="n">matrix</span><span class="w"> </span><span class="c1">#help page</span><span class="w">
		
 </span><span class="c1"># first row, first column</span><span class="w">
 </span><span class="n">mat1</span><span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">]</span><span class="w">
		
 </span><span class="c1"># all rows, column 1</span><span class="w">
 </span><span class="n">mat1</span><span class="p">[,</span><span class="m">1</span><span class="p">]</span><span class="w">
		
 </span><span class="c1"># first row, all columns</span><span class="w">
 </span><span class="n">mat1</span><span class="p">[</span><span class="m">1</span><span class="p">,]</span><span class="w">
		
 </span><span class="c1"># assign names to rows and columns</span><span class="w">
 </span><span class="n">rownames</span><span class="p">(</span><span class="n">mat1</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Row1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Row2"</span><span class="p">)</span><span class="w">
 </span><span class="n">colnames</span><span class="p">(</span><span class="n">mat1</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Col1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Col2"</span><span class="p">)</span><span class="w">
		
 </span><span class="c1"># see names of rows and columns</span><span class="w">
 </span><span class="n">rownames</span><span class="p">(</span><span class="n">mat1</span><span class="p">)</span><span class="w"> </span><span class="c1"># "Row1" "Row2"</span><span class="w">
 </span><span class="n">colnames</span><span class="p">(</span><span class="n">mat1</span><span class="p">)</span><span class="w"> </span><span class="c1"># "Col1" "Col2"</span><span class="w">
		
 </span><span class="c1"># view column 1</span><span class="w">
 </span><span class="n">mat1</span><span class="p">[,</span><span class="s2">"Col1"</span><span class="p">]</span><span class="w">
		
 </span><span class="n">matrix</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="o">=</span><span class="m">50</span><span class="p">)</span><span class="c1"># nrow not assigned, R does it for you; 100/50 = 2 rows</span><span class="w">
 </span><span class="c1"># if both nrow, ncol not assigned, R makes 1 col</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li>
        <p>matrix operations</p>

        <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="c1"># Element-by-Element Multiplication</span><span class="w">
 </span><span class="n">mat1</span><span class="o">*</span><span class="n">mat2</span><span class="w">
		
 </span><span class="nf">is.matrix</span><span class="p">(</span><span class="n">mat3</span><span class="p">)</span><span class="w">
 </span><span class="n">is.vector</span><span class="p">(</span><span class="n">vec1</span><span class="p">)</span><span class="w">
 </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">vec1</span><span class="p">)</span><span class="w"> </span><span class="c1"># vertical matrix</span><span class="w">
</span></code></pre></div>        </div>
      </li>
    </ol>
  </li>
  <li><strong>Datasets</strong>
    <ol>
      <li>Dataset Examination</li>
    </ol>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">	
 </span><span class="o">?</span><span class="n">swiss</span><span class="w">
	
 </span><span class="c1"># EXAMINE THE DATASET</span><span class="w">
 </span><span class="n">head</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w"> </span><span class="c1"># see first few rows</span><span class="w">
 </span><span class="n">tail</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w"> </span><span class="c1"># see last few rows </span><span class="w">
 </span><span class="n">swiss</span><span class="w"> </span><span class="c1"># see entire data set</span><span class="w">
 </span><span class="nf">dim</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="c1"># number of rows and columns</span><span class="w">
 </span><span class="n">ncol</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w"> 
 </span><span class="n">nrow</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w">
 </span><span class="n">colnames</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w">
 </span><span class="n">summary</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w"> </span><span class="c1">#min/1st Quartile/mean/3rd Q/max</span><span class="w">
	
	
 </span><span class="c1"># R differentiates between "matrix" objects and "data frame" objects.</span><span class="w">
 </span><span class="c1"># When you do read.csv/read.table it'll be a dataframe</span><span class="w">
 </span><span class="nf">is.matrix</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w">
 </span><span class="n">is.data.frame</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w">
 </span><span class="n">swiss</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w">
	
 </span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="w"> </span><span class="c1">#refer to a column (Fertility is col name)</span><span class="w">
 </span><span class="c1">#OR you can do this (not recommended)</span><span class="w">
 </span><span class="n">attach</span><span class="p">(</span><span class="n">swiss</span><span class="p">)</span><span class="w">
 </span><span class="n">Fertility</span><span class="w">
 </span><span class="c1">#OR you can also do:</span><span class="w">
 </span><span class="n">swiss</span><span class="p">[,</span><span class="s2">"Fertility"</span><span class="p">]</span><span class="w">
 </span><span class="n">swiss</span><span class="p">[,</span><span class="m">1</span><span class="p">]</span><span class="w">
</span></code></pre></div>    </div>

    <p>b. Dataset Summary</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">)</span><span class="w">
 </span><span class="n">var</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">)</span><span class="w">
 </span><span class="n">summary</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Agriculture</span><span class="p">)</span><span class="w"> </span><span class="c1">#for continuous variables</span><span class="w">
 </span><span class="n">table</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Education</span><span class="p">)</span><span class="w"> </span><span class="c1">#stem and leaf plot (for discrete variables)</span><span class="w">
 </span><span class="n">table</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Education</span><span class="p">,</span><span class="w"> </span><span class="n">swiss</span><span class="o">$</span><span class="n">Examination</span><span class="p">)</span><span class="w"> </span><span class="c1"># how many times each combination appeared</span><span class="w">
</span></code></pre></div>    </div>

    <p>c. Subsetting Dataset</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">FertilitySubset</span><span class="o">&lt;-</span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">[</span><span class="n">swiss</span><span class="o">$</span><span class="n">Agriculture</span><span class="o">&gt;</span><span class="m">50</span><span class="p">]</span><span class="w">
 </span><span class="n">summary</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">[</span><span class="n">swiss</span><span class="o">$</span><span class="n">Agriculture</span><span class="o">&gt;</span><span class="m">50</span><span class="p">])</span><span class="w"> </span><span class="c1">#fertitilty where agr &gt; 50</span><span class="w">
 </span><span class="n">summary</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">[</span><span class="n">swiss</span><span class="o">$</span><span class="n">Agriculture</span><span class="o">&gt;</span><span class="m">50</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">swiss</span><span class="o">$</span><span class="n">Catholic</span><span class="o">&gt;</span><span class="m">50</span><span class="p">])</span><span class="w"> </span><span class="c1">#AND</span><span class="w">
</span></code></pre></div>    </div>

    <p>d. Plotting Dataset</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">hist</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">)</span><span class="w">
 </span><span class="n">boxplot</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">)</span><span class="w">
 </span><span class="n">plot</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Agriculture</span><span class="p">,</span><span class="w"> </span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">)</span><span class="w">
	
 </span><span class="n">plot</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Agriculture</span><span class="p">,</span><span class="w"> </span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">,</span><span class="w">
     </span><span class="n">main</span><span class="o">=</span><span class="s2">"Title Goes Here"</span><span class="p">,</span><span class="w">
     </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"X-axis label goes here"</span><span class="p">,</span><span class="w">
     </span><span class="n">ylab</span><span class="o">=</span><span class="s2">"Y-axis label goes here"</span><span class="p">,</span><span class="w">
     </span><span class="n">xlim</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">100</span><span class="p">),</span><span class="w">
     </span><span class="n">ylim</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">100</span><span class="p">),</span><span class="w">
     </span><span class="n">pch</span><span class="o">=</span><span class="m">21</span><span class="p">,</span><span class="w">
     </span><span class="n">cex</span><span class="o">=</span><span class="m">5</span><span class="p">,</span><span class="w">
     </span><span class="n">col</span><span class="o">=</span><span class="s2">"red"</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>Logic</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="c1"># What if we compare a vector of numbers to another number?</span><span class="w">
 </span><span class="n">vec1</span><span class="o">&lt;-</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">)</span><span class="w">
 </span><span class="n">vec1</span><span class="o">&gt;</span><span class="m">3</span><span class="w"> </span><span class="c1"># R distributes the 3 for you</span><span class="w">
	
 </span><span class="n">vec2</span><span class="o">&lt;</span><span class="m">-2</span><span class="o">:</span><span class="m">5</span><span class="w">
 </span><span class="n">vec1</span><span class="o">==</span><span class="n">vec2</span><span class="w"> </span><span class="c1">#TRUE</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>Conditioning</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">vec1</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="c1">#1st el in vec1 (just like python list indexing)</span><span class="w">
 </span><span class="c1">#same as</span><span class="w">
 </span><span class="n">vec1</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)]</span><span class="w">
 </span><span class="n">vec1</span><span class="p">[</span><span class="n">vec1</span><span class="o">==</span><span class="n">vec2</span><span class="p">]</span><span class="w"> </span><span class="c1">#same logic as above</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>Graphics</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">	
 </span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">))</span><span class="w"> </span><span class="c1">#mfrow = how to split window</span><span class="w">
 </span><span class="n">hist</span><span class="p">(</span><span class="n">rnorm</span><span class="p">(</span><span class="m">100</span><span class="p">))</span><span class="w">
 </span><span class="n">boxplot</span><span class="p">(</span><span class="n">rnorm</span><span class="p">(</span><span class="m">100</span><span class="p">))</span><span class="w">
 </span><span class="n">par</span><span class="p">(</span><span class="n">las</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="c1"># turns horizontal labels to make it easier to read</span><span class="w">
	
 </span><span class="n">abline</span><span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="c1"># add a vertical line</span><span class="w">
 </span><span class="n">abline</span><span class="p">(</span><span class="n">h</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">lwd</span><span class="o">=</span><span class="m">3</span><span class="p">)</span><span class="w"> </span><span class="c1"># add a horizontal line, and make it thick using lwd:</span><span class="w">
 </span><span class="c1"># add a line with intercept -3 and slope .1, change the line type via lty and the color via col</span><span class="w">
 </span><span class="n">abline</span><span class="p">(</span><span class="m">-3</span><span class="p">,</span><span class="m">.1</span><span class="p">,</span><span class="w"> </span><span class="n">lty</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="s2">"orange"</span><span class="p">)</span><span class="w">
	
 </span><span class="c1"># For plots, here's an excerpt from the RPrimer:</span><span class="w">
 </span><span class="n">plot</span><span class="p">(</span><span class="n">swiss</span><span class="o">$</span><span class="n">Agriculture</span><span class="p">,</span><span class="w"> </span><span class="n">swiss</span><span class="o">$</span><span class="n">Fertility</span><span class="p">,</span><span class="w">
     </span><span class="n">main</span><span class="o">=</span><span class="s2">"Title Goes Here"</span><span class="p">,</span><span class="w">
     </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"X-axis label goes here"</span><span class="p">,</span><span class="w">
     </span><span class="n">ylab</span><span class="o">=</span><span class="s2">"Y-axis label goes here"</span><span class="p">,</span><span class="w">
     </span><span class="n">xlim</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">100</span><span class="p">),</span><span class="w">
     </span><span class="n">ylim</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">100</span><span class="p">),</span><span class="w">
     </span><span class="n">pch</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="c1">#point character (circle dot, triangle dot, x dot, etc.)</span><span class="w">
     </span><span class="n">cex</span><span class="o">=</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="c1"># default point size will be multiplied by this number</span><span class="w">
     </span><span class="n">col</span><span class="o">=</span><span class="s2">"red"</span><span class="p">)</span><span class="w">
	
 </span><span class="n">colors</span><span class="p">()</span><span class="w"> </span><span class="c1"># names of available colors</span><span class="w">
	
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>Packages</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">install.packages</span><span class="p">(</span><span class="s2">"perm"</span><span class="p">)</span><span class="w"> </span><span class="c1">#just once</span><span class="w">
 </span><span class="n">library</span><span class="p">(</span><span class="n">perm</span><span class="p">)</span><span class="w"> </span><span class="c1">#import</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>importing a dataset</p>

    <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">getwd</span><span class="p">()</span><span class="w">
 </span><span class="n">setwd</span><span class="p">()</span><span class="w">
 </span><span class="n">d</span><span class="o">=</span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="s2">"path"</span><span class="p">,</span><span class="n">header</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="R" /><category term="R" /><category term="introductory" /><category term="statistics" /><summary type="html"><![CDATA[start of QAI]]></summary></entry><entry><title type="html">some paper readings</title><link href="http://localhost:4000/project/some-paper-readings/" rel="alternate" type="text/html" title="some paper readings" /><published>2024-06-03T00:00:00-04:00</published><updated>2024-06-03T15:53:54-04:00</updated><id>http://localhost:4000/project/some-paper-readings</id><content type="html" xml:base="http://localhost:4000/project/some-paper-readings/"><![CDATA[<p>Note: <strong>Many of the sentences or phrases in the first pass are directly copied from the original paper,</strong> as the goal of this part of the review was to extract the RQs and write down how the paper answers them (first pass). Citations are at the end of the page.</p>

<h3 id="pass-1-title-abstract-introduction-headings-conclusion">Pass 1 (title, abstract, introduction, headings, conclusion)</h3>

<ul>
  <li><a href="https://doi.org/10.1145/3576840.3578277"><strong>Assessing Google Search’s New Features in Supporting Credibility Judgments of Unknown Website</strong></a><strong>s</strong>
    <ul>
      <li>RQ1: Are users familiar with the new Google features “About this page” and “More about this page”?</li>
      <li>RQ2: Are the 9 W3C domain credibility signals useful?</li>
      <li>answered by: user study with 25 undergrad students</li>
    </ul>
  </li>
  <li><a href="https://ojs.aaai.org/index.php/ICWSM/article/view/7352">The Media Coverage of the 2020 US Presidential Election Candidates through the Lens of Google’s Top Stories</a>
    <ul>
      <li>abstract:
        <ul>
          <li>many news sources, but we are only exposed to a certain few through news aggregators. Google top stories is one of them. A very small number of sources dominate the section, with a highly skewed distribution.</li>
          <li>Dataset: duration -  1 year of 30 political candidate queries, frequency: 4-12 daily observation to measure the “freshness” of news stories</li>
        </ul>
      </li>
      <li>RQs
        <ul>
          <li>RQ1: Which News Sources does the Top Stories Algorithm Prefer?
            <ul>
              <li><strong>inequality of news sources:</strong> 2,168 total news sources, but 1/3 of all articles were from only 8 news publishers</li>
            </ul>
          </li>
          <li>RQ2: Which Presidential Candidates do the News Sources Prefer?
            <ul>
              <li><strong>inequality of candidates</strong>: top mentions of candidates: Biden, Warren, Sanders, Buttigieg (Excluding Trump — in office)</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="https://dl.acm.org/doi/10.1145/3351095.3372835"><strong>The case for voter-centered audits of search engines during political elections</strong></a>
    <ul>
      <li>RQ: how should an auditing framework that is explicitly centered on the principle of ensuring and maximizing fairness for the public (i.e., voters) operate?</li>
      <li>Four datasets:
        <ul>
          <li>a survey of eligible U.S. voters about their information needs ahead of the 2018 U.S. elections</li>
          <li>a dataset of biased political phrases used in a large-scale Google audit ahead of
  the 2018 U.S. election</li>
          <li>Google’s “related searches” phrases for two groups of political candidates in the 2018 U.S. election (one group is composed entirely of women)</li>
          <li>autocomplete suggestions and result pages for a set of searches on the day of a statewide election in the U.S. state of Virginia in 2019.</li>
        </ul>
      </li>
      <li>Introduction:
        <ul>
          <li>motivation: Trump lost the popular vote in 2016, but Google cited a conspiracy blog and claimed Trump won on the top search result page for the query “final vote count 2016”</li>
          <li>Why is auditing necessary?
            <ul>
              <li>Unlike Twitter which alerted its users of false content generated by Russia’s Internet Research Agency, Google simply fixes the problem without the same transparency. How many users searched for the problematic query? How did they fix it?</li>
              <li>some might say it’s a protective measure — what if the hackers exploit the solution to improve their methods? → the lack of exposure of disinformation on the web is harmful to the public — e.g. Dylan Roof’s hate crime that started from searching “black on white crime” on Google. (Data void)</li>
            </ul>
          </li>
          <li>Three methods to detect political bias on search platforms:
            <ul>
              <li>Third-party manipulation:
                <ul>
                  <li>“Google bombing” in the early 2000s</li>
                </ul>
              </li>
              <li>Ranking Bias
                <ul>
                  <li>“search engine manipulation effect”, tied to “filter bubbles”</li>
                </ul>
              </li>
              <li>ecosystem bias
                <ul>
                  <li>consider the complexity of search platforms — users, content providers, ranking, etc.</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>How should we design search engine audits that are voter-centric?
            <ul>
              <li>theory of “information cues”: voters prefer to take shortcuts to get informed about elections.</li>
              <li>biased searches: need to come from voters themselves</li>
              <li>beyond Candidate Names: voters first search who are the candidates → then modify the search so that they are more specfic</li>
              <li>unreliable localization: ___ “near me” ← localized suggestions</li>
            </ul>
          </li>
          <li>conclusion: future search engine audits go beyond identifying whether their ranking algorithms are biased, but instead, take a broader ecosystem approach.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="https://ojs.aaai.org/index.php/ICWSM/article/view/22214"><strong>Capturing the Aftermath of the Dobbs v. Jackson Women’s Health Organization Decision in Google Search Results across the U.S.</strong></a>
    <ul>
      <li>Dataset: more than 1.74 million Google SERPs collected in the aftermath of the Dobbs v. Jackson Women’s Health PRganization Decision. Can be used to answer questions such as:
        <ul>
          <li>How do Google Search results change following an impactful real-world event, such as the U.S. Supreme Court decision on June 24, 2022 to overturn Roe v. Wade?</li>
          <li>What do they tell us about the nature of event-driven content, generated by
  various participants in the online information environment?</li>
        </ul>
      </li>
      <li>Dataset Summary:
        <ul>
          <li>65 locations (using Google localized search), June 24th to July 17th 2022. 1,698 search phrases.</li>
          <li>~ 1.7 million HTML pages,  ~20k unique URLs from  ~5k websites in organic search results,  ~17k  unique URLs from  ~2k websites in top stories.</li>
          <li><a href="https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2FYFAH9X">Dataset Link</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="https://cdn.aaai.org/ocs/18316/18316-78935-1-PB.pdf"><strong>Opening Up the Black Box: Auditing Google’s Top Stories Algorithm</strong></a>
    <ul>
      <li>Audit of the Top Stories Panel (data collection, exploration, and analysis)</li>
      <li>Suggests Google might be addressing the “filter bubble” issue by selecting less known publishers for the 3rd position in the Top Stories panel.</li>
      <li>RQ1, RQ2: A novel audit of the Google’s Top stories panel that pro-
  vides insights into its algorithmic choices for selecting and ranking news publishers.
        <ul>
          <li>1% of publishers (11 out of 1,125) produce 41% of total articles and are present
  in 46% of observations of the Top Stories panel.</li>
          <li>the number of sources in the 3rd position is more than double that of sources in the 1st position.</li>
        </ul>
      </li>
      <li>RQ3: Evidence about the potential of using audit results from news aggregation platforms (e.g., Google) to answer questions relevant to media communication theory such as media selection bias (e.g., which publishers cover which stories)
        <ul>
          <li>What events or people are publishers choosing to report on any given day?</li>
          <li>e.g. the top sources for the query “hilary clinton” were “Washington Examiner” and “Fox News”</li>
          <li>“selection bias”  is indeed observed through hierarchal clustering of 65 publishers.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="all-paper-links">All paper links:</h3>

<ul>
  <li><a href="https://dl.acm.org/doi/10.1145/3576840.3578277">https://dl.acm.org/doi/10.1145/3576840.3578277</a></li>
  <li><a href="https://ojs.aaai.org/index.php/ICWSM/article/view/7352">https://ojs.aaai.org/index.php/ICWSM/article/view/7352</a></li>
  <li><a href="https://dl.acm.org/doi/10.1145/3351095.3372835">https://dl.acm.org/doi/10.1145/3351095.3372835</a></li>
  <li><a href="https://ojs.aaai.org/index.php/ICWSM/article/view/22214">https://ojs.aaai.org/index.php/ICWSM/article/view/22214</a></li>
  <li>
    <p><a href="https://cdn.aaai.org/ocs/18316/18316-78935-1-PB.pdf">https://cdn.aaai.org/ocs/18316/18316-78935-1-PB.pdf</a></p>

    <p><img src="https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNHcyOXFzcWR5ZDI0ajduMzFpNmp6Yzh0bzQ0aXJ0MWEzZXZoMnZjYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/rOkbPKO2dlXzO/giphy.gif" alt="giphy.gif" /></p>
  </li>
</ul>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="project" /><category term="audit" /><category term="paper" /><category term="search" /><summary type="html"><![CDATA[some readings for summer 2024 research]]></summary></entry><entry><title type="html">web credibility blog posts</title><link href="http://localhost:4000/project/web-credibility-blog-posts/" rel="alternate" type="text/html" title="web credibility blog posts" /><published>2024-05-31T00:00:00-04:00</published><updated>2024-05-31T00:28:53-04:00</updated><id>http://localhost:4000/project/web-credibility-blog-posts</id><content type="html" xml:base="http://localhost:4000/project/web-credibility-blog-posts/"><![CDATA[<h3 id="are-women-evil-hacking-googles-search-results">Are women evil? Hacking Google’s search results:</h3>

<p><a href="https://medium.com/@enimust/are-women-evil-hacking-googles-search-results-eebfbbffe179">https://medium.com/@enimust/are-women-evil-hacking-googles-search-results-eebfbbffe179</a></p>

<p>→ In 2017, Google suggested evil to autocomplete the query “Are women __”. Why did this happen? The article that appears on the top of the search query contain the phrase many times and contain other signals that may have caused the autocomplete to happen. Thus the article suggests the use of “nutrition labels” for search results. The users can read the labels like “Who was the article written by?” or “Is this a reliable source?” and decide on their own whether the information is credible or not. After this article was written, Google implemented a feature (the three vertical dots icon) where when clicked, the information about the website is displayed. However, let’s be truthful — who clicks on those dots? It will be faster for the users to go to the page, quickly scan it, and get out if it is unsatisfactory. What would be an easier, faster way to let the users know the credibility of a website? This question remains to be answered.</p>

<h3 id="presidents-in-the-clan-seo-techniques-to-hack-history">Presidents in the Clan. SEO techniques to hack history:</h3>

<p><a href="https://medium.com/@enimust/presidents-in-the-klan-seo-techniques-to-hack-history-953e48dc413c">https://medium.com/@enimust/presidents-in-the-klan-seo-techniques-to-hack-history-953e48dc413c</a></p>

<p>→ This example clearly shows how there is a clear path to exploiting the Google search algorithm to get better rankings on the search result page. This particular example about the presidents in the Klan ended up in the best position possible — the featured snippet section. In high school, I wrote an article about a very niche field (cultural appropriation in Korea written in English). The next week, my article was in the Google snippet! I remember being very excited and texting a lot of friends. I still wonder what part of my article made it appear there, in bold, looking very important. Maybe it was the sources I cited, or the addition of a Korean translation, or the date it was created. Anyways, this blog post also cites some options that may have influenced the article full of fake news making it to the featured snippet. It also suggests some labels that could have prevented this from happening — maybe add an author, or some information about the article. Again, Google later implemented such a feature with the three dots that no one really clicks.</p>

<h3 id="the-fake-news-story-that-fooled-even-maggie-haberman">The fake news story that fooled even Maggie Haberman:</h3>

<p><a href="https://medium.com/@enimust/the-fake-news-story-that-fooled-even-maggie-haberman-c22453c47169">https://medium.com/@enimust/the-fake-news-story-that-fooled-even-maggie-haberman-c22453c47169</a></p>

<p>→ How do I know whether a story that is going viral on Instagram, TikTok, etc. is fake news or not? I think about this question on a daily basis, probably because I spend a lot of time (I try to use screen time.. ) on Instagram and discover just scrolling through whatever Instagram thinks I am interested in. When there is a “breaking news” story that I haven’t seen in the New York Times or anywhere that is confirmed to be credible, I first check the 1. number of comments (because one out of the 300 comments must have looked it up for me, right?), 2. the date (if the news is from a year ago but claims to be breaking news, it’s not), and content (are the documents, pictures, etc). But last month, when an Instagram post told me Tom Holland and Zendaya were getting married, I thought it was real — people were congratulating them in the comment section, the date was from yesterday, and there was a cute couple picture on the post! But I was too lazy to open Safari and triple-check, so I started spreading the news until my sister told me it was fake news. Oh well. So what feature would have stopped me from believing these two top Hollywood stars are getting married? Maybe an app that extracts text from a screenshot and tells me verified information about it? What easy verification methods are there that are easier than clicking three dots…</p>

<ul>
  <li>The information panels on Google and Facebook: <a href="https://medium.com/@enimust/the-information-panels-on-google-and-facebook-uncovering-their-blind-spots-2e8210b2e697">https://medium.com/@enimust/the-information-panels-on-google-and-facebook-uncovering-their-blind-spots-2e8210b2e697</a></li>
</ul>

<p>→ We all know that some links on Google search results are sketchy. We make sure to check the .gov pages when we are looking for traveler information, or .edu pages when we are looking for academic information. However, I don’t think I’ve ever questioned the information on the right-side info box. It just seemed right from the start, the one-sentence summary about whatever organization or website I was looking for. This article showed me that I was wrong — I looked up some of the celebrities with criminal records that I know, and it seems like their one-line description is just their Wikipedia page introduction.</p>

<p>More articles on Google search results (will read this weekend):</p>

<ul>
  <li>Are Google’s Top Stories biased? It’s complicated. <a href="https://medium.com/@enimust/are-googles-top-stories-politically-biased-it-s-complicated-e9c68e269ed9">https://medium.com/@enimust/are-googles-top-stories-politically-biased-it-s-complicated-e9c68e269ed9</a></li>
  <li>It’s a Google drenched society, but we still suffer from information-drought: <a href="https://medium.com/@enimust/its-a-google-drenched-society-but-we-still-suffer-from-an-information-drought-4be35132b3d5">https://medium.com/@enimust/its-a-google-drenched-society-but-we-still-suffer-from-an-information-drought-4be35132b3d5</a></li>
  <li>Google AI &amp; Health: <a href="https://ipscell.com/2024/05/google-ai-overviews-on-stem-cells-are-a-bust-so-far-endanger-public-health/">https://ipscell.com/2024/05/google-ai-overviews-on-stem-cells-are-a-bust-so-far-endanger-public-health/</a></li>
</ul>

<h3 id="nyt-article-on-googles-ai-overview-feature-httpswwwnytimescom20240524technologygoogle-ai-overview-searchhtml">NYT article on Google’s AI overview feature: <a href="https://www.nytimes.com/2024/05/24/technology/google-ai-overview-search.html">https://www.nytimes.com/2024/05/24/technology/google-ai-overview-search.html</a></h3>

<p>→ “Eat at least one small rock daily!” Says who? Geologists at UC Berkeley! This is what Google SGE told its users who searched “How many rocks should I eat.” This result, while it may be funny, is problematic because it cites some sources with some author that seems pretty credible. However, no UC Berkeley geologist said that — the source is The Onion, where the sources are made up for fun. But AI can’t tell whether humans should eat rocks or not. It saw a popular website with a lot of traffic, with sources and clear explanations, and decided to use it. While it is an attempt for Google to try to “label” its links, it does the job poorly and leads to more confusion for its users with its new AI feature.</p>

<p><img src="https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExa3ZsMGsyOGt2b3RhdTU4NWF6bmlmYzlubzBnZHExYTNqZjlvcmg5MiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Og8L6NGjDQzFm/giphy.gif" alt="giphy.gif" /></p>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="project" /><category term="sge" /><category term="Google" /><category term="serp" /><category term="AI" /><summary type="html"><![CDATA[some thoughts on some blog posts]]></summary></entry><entry><title type="html">notion to blog post md</title><link href="http://localhost:4000/project/notion-to-blog-post-md/" rel="alternate" type="text/html" title="notion to blog post md" /><published>2024-05-30T00:00:00-04:00</published><updated>2024-05-30T18:17:59-04:00</updated><id>http://localhost:4000/project/notion-to-blog-post-md</id><content type="html" xml:base="http://localhost:4000/project/notion-to-blog-post-md/"><![CDATA[<p>Now why have I not been writing on this blog? It’s just too much work writing in markdown, creating a file with a specific format, and uploading it. So I created a quick notion to blog direct conversion pipeline.</p>

<h3 id="creating-the-notion-to-mdjs-file">Creating the notion-to-md.js file</h3>

<p>adoption of  <a href="https://github.com/souvikinator/notion-to-md">https://github.com/souvikinator/notion-to-md</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">@notionhq/client</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">NotionToMarkdown</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">notion-to-md</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// or</span>
<span class="c1">// import {NotionToMarkdown} from "notion-to-md";</span>

<span class="kd">const</span> <span class="nx">notion</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">({</span>
    <span class="na">auth</span><span class="p">:</span> <span class="dl">"</span><span class="s2">YOUR_SECRET_KEY</span><span class="dl">"</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">// passing notion client to the option</span>
<span class="kd">const</span> <span class="nx">n2m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NotionToMarkdown</span><span class="p">({</span> <span class="na">notionClient</span><span class="p">:</span> <span class="nx">notion</span> <span class="p">});</span>

<span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span><span class="p">{</span>
        <span class="kd">const</span> <span class="nx">mdblocks</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">n2m</span><span class="p">.</span><span class="nx">pageToMarkdown</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
        <span class="kd">const</span> <span class="nx">mdString</span> <span class="o">=</span> <span class="nx">n2m</span><span class="p">.</span><span class="nx">toMarkdownString</span><span class="p">(</span><span class="nx">mdblocks</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mdString</span><span class="p">.</span><span class="nx">parent</span><span class="p">);</span> <span class="c1">//how we pass stdout to shell</span>
    <span class="p">}</span><span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div></div>

<h3 id="running-this-file">running this file</h3>

<ol>
  <li>install nvm</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
</code></pre></div></div>

<ol>
  <li>
    <p>load nvm</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">export </span><span class="nv">NVM_DIR</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">XDG_CONFIG_HOME</span><span class="p">-</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">printf</span> %s <span class="s2">"</span><span class="k">${</span><span class="nv">HOME</span><span class="k">}</span><span class="s2">/.nvm"</span> <span class="o">||</span> <span class="nb">printf</span> %s <span class="s2">"</span><span class="k">${</span><span class="nv">XDG_CONFIG_HOME</span><span class="k">}</span><span class="s2">/nvm"</span><span class="si">)</span><span class="s2">"</span>
 <span class="o">[</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Install Node.js version 12.18.1</p>

    <p>(current ver throws error :  <code class="language-plaintext highlighter-rouge">Failed to convert page to Markdown: TypeError [ERR_INVALID_ARG_TYPE]: The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView. Received an instance of Object</code>)</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> nvm <span class="nb">install </span>12.18.1
 nvm use 12.18.1
</code></pre></div>    </div>

    <p><code class="language-plaintext highlighter-rouge">node -v</code> should show v12.18.1</p>
  </li>
  <li>
    <p>Connect your notion page</p>
    <ol>
      <li><a href="https://www.notion.so/help/create-integrations-with-the-notion-api#create-an-internal-integration">Create an internal integration </a>and get your API key</li>
      <li>Go to the page you want to go and choose <code class="language-plaintext highlighter-rouge">+Add Connections</code></li>
      <li>Get the link of the page on the search bar and get the last part (i.e. the page id): it should be something like <code class="language-plaintext highlighter-rouge">7c5e1cf7e4c34a5585f829533b17d3d9</code></li>
    </ol>
  </li>
</ol>

<h3 id="creating-a-notion--blog-post-pipeline-using-a-shell-script">Creating a Notion → blog post pipeline using a Shell Script</h3>

<p>it’s still a lot of work (for a lazy person like me) to activate the environment with nvm, run that line, and move the output file into the blog post folder, so I’m going to make a shell script with all the commands.</p>

<p>Note that I am using a conda environment “blog”</p>

<ol>
  <li>
    <p>create notion-to-blog.sh file</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">#!/bin/bash</span>
	
 <span class="c"># Activate Conda environment</span>
 <span class="nb">source</span> /Users/ihoonsun/anaconda3/etc/profile.d/conda.sh
 conda activate blog
	
 <span class="c"># Prompt the user to choose a category</span>
 <span class="nb">echo</span> <span class="s2">"Select a category for the blog post:"</span>
 <span class="k">select </span>category <span class="k">in</span> <span class="s2">"project"</span> <span class="s2">"life"</span>
 <span class="k">do
     case</span> <span class="nv">$category</span> <span class="k">in
         </span>project <span class="p">)</span> <span class="nv">output_dir</span><span class="o">=</span><span class="s2">"./_posts/projects"</span><span class="p">;</span> <span class="nb">break</span><span class="p">;;</span>
         life <span class="p">)</span> <span class="nv">output_dir</span><span class="o">=</span><span class="s2">"./_posts/life"</span><span class="p">;</span> <span class="nb">break</span><span class="p">;;</span>
         <span class="k">*</span> <span class="p">)</span> <span class="nb">echo</span> <span class="s2">"Invalid option. Please select a number from the list."</span><span class="p">;;</span>
     <span class="k">esac</span>
 <span class="k">done</span>
	
 <span class="c"># Ask the user for the title of the blog post in a regular sentence</span>
 <span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Enter the title of the blog post: "</span> title
	
 <span class="c"># Generate date and format the title into a filename</span>
 <span class="nv">date_now</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +<span class="s2">"%Y-%m-%d"</span><span class="si">)</span>
 <span class="nv">title_formatted</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$title</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span> | <span class="nb">tr</span> <span class="nt">-s</span> <span class="s1">'[:space:]'</span> <span class="s1">'-'</span> | <span class="nb">sed</span> <span class="s1">'s/[^a-zA-Z0-9\-]//g'</span><span class="si">)</span>
 <span class="c"># Avoid trailing hyphen if title is empty after formatting</span>
 <span class="nv">filename</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">date_now</span><span class="k">}</span><span class="s2">-</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$title_formatted</span> | <span class="nb">sed</span> <span class="s1">'s/-$//'</span><span class="si">)</span><span class="s2">.md"</span>
 <span class="nv">output_path</span><span class="o">=</span><span class="s2">"</span><span class="nv">$output_dir</span><span class="s2">/</span><span class="nv">$filename</span><span class="s2">"</span>
	
 <span class="c"># Check if the file already exists</span>
 <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$output_path</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
     </span><span class="nb">echo</span> <span class="s2">"*Awesome* You are making a new post! ღ'ᴗ'ღ"</span>
	
     <span class="c"># Ask for new Notion page ID to update content</span>
     <span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Enter the Notion page ID for the new content: "</span> page_id
	
     <span class="c"># Ask the user for header details</span>
     <span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Enter the excerpt for the blog post: "</span> excerpt
     <span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Enter tags for the blog post (space-separated): "</span> tags
     <span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Enter overlay image file name (should be in assets/images/banners). Enter 'default.png' to use a template: "</span> overlay_image
     <span class="nv">last_modified_at</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +<span class="s2">"%Y-%m-%d %H:%M:%S %z"</span><span class="si">)</span>
	
     <span class="c"># Run the Node.js script, get the markdown content, and add the header</span>
     node notion-to-md.js <span class="nv">$page_id</span> | <span class="nb">cat</span> &lt;<span class="o">(</span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"---</span><span class="se">\n</span><span class="s2">
 title: </span><span class="se">\"</span><span class="nv">$title</span><span class="se">\"</span><span class="s2">
 excerpt: </span><span class="se">\"</span><span class="nv">$excerpt</span><span class="se">\"</span><span class="s2">
 date: </span><span class="nv">$date_now</span><span class="s2">
 lastmod: </span><span class="nv">$last_modified_at</span><span class="s2">
 last_modified_at: </span><span class="nv">$last_modified_at</span><span class="s2">
 categories: </span><span class="nv">$category</span><span class="s2">
 tags: </span><span class="nv">$tags</span><span class="s2">
 classes:
 toc: true
 toc_label:
 toc_sticky: true
 header:
     image:
     teaser:
     overlay_image: ./assets/images/banners/</span><span class="nv">$overlay_image</span><span class="s2">
 sitemap:
     changefreq: daily
     priority: 1.0
 author:
 ---</span><span class="se">\n</span><span class="s2">
 &lt;!--postNo: </span><span class="nv">$date_now</span><span class="s2">--&gt;</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span> - <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$output_path</span><span class="s2">"</span>
	
     <span class="nb">echo</span> <span class="s2">"Markdown file created at </span><span class="nv">$output_path</span><span class="s2">"</span>
 <span class="k">else
     </span><span class="nb">echo</span> <span class="s2">"Updating the blog post..."</span>
     <span class="c"># Extract the header from existing file</span>
     <span class="nv">header</span><span class="o">=</span><span class="si">$(</span><span class="nb">awk</span> <span class="s1">'BEGIN {printOn=0;} /^---$/ {if (printOn) {print; exit;} else {printOn=1;}} printOn {print;}'</span> <span class="s2">"</span><span class="nv">$output_path</span><span class="s2">"</span><span class="si">)</span>
     <span class="nb">echo</span> <span class="nv">$header</span>
	    
     <span class="c"># Ask for new Notion page ID to update content</span>
     <span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Enter the Notion page ID for the new content: "</span> page_id
	
     <span class="c"># Get new content and replace the old content</span>
     <span class="nv">updated_content</span><span class="o">=</span><span class="si">$(</span>node notion-to-md.js <span class="nv">$page_id</span><span class="si">)</span>
     <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$header</span><span class="s2">
 </span><span class="nv">$updated_content</span><span class="s2">"</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$output_path</span><span class="s2">"</span>
	
     <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$output_path</span><span class="s2"> was successfully updated!"</span>
	
    git add <span class="s2">"</span><span class="nv">$output_path</span><span class="s2">"</span>
    git commit <span class="nt">-m</span> <span class="s2">"Updated blog post: </span><span class="nv">$title</span><span class="s2">"</span>
    git push
 <span class="k">fi</span> <span class="c">#end of if block</span>
	
	
	
</code></pre></div>    </div>
  </li>
  <li>
    <p>make the script executable</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">chmod</span> +x notion-to-blog.sh 
</code></pre></div>    </div>
  </li>
  <li>
    <p>run the script</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./notion-to-blog.sh
</code></pre></div>    </div>
  </li>
</ol>

<p>Now we have a simple program where the script asks the user the info it needs.</p>

<p>The resulting file is automatically saved in the path like this: ./hl105.github.io/_posts/projects/2024-05-30-7c5e1cf7e4c34a5585f829533b17d3d9.md</p>

<p>…and this is how this post was made!</p>

<p><img src="https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExYjhzYWdiMWE1cm1td3lnYjg2ODFzajM0NTdmbTZra3dyejNkaHB2ZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/c60cIe0Buhi48/giphy.gif" alt="via GIPHY 프로블로거가 되어보잣" /></p>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="project" /><category term="notion" /><category term="blog" /><category term="markdown" /><summary type="html"><![CDATA[when you are too lazy to write markdown but love notion]]></summary></entry><entry><title type="html">welcome to my blog</title><link href="http://localhost:4000/life/welcome/" rel="alternate" type="text/html" title="welcome to my blog" /><published>2024-03-27T23:30:00-04:00</published><updated>2024-03-28T03:26:00-04:00</updated><id>http://localhost:4000/life/welcome</id><content type="html" xml:base="http://localhost:4000/life/welcome/"><![CDATA[<!--postNo: 2024-03-27-->

<p><img src="/assets/images/posts/kirby.gif" alt="" /><br />
under construction!</p>

<h2 id="jekyll">Jekyll</h2>
<p>instructions</p>

<h2 id="installation">Installation</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># instructions</span>
commands 
</code></pre></div></div>

<h2 id="what-to-do">What to do</h2>

<p>more things to do</p>

<h2 id="reference">Reference</h2>
<p>some links</p>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="life" /><category term="Jekyll" /><category term="blog_logistics" /><summary type="html"><![CDATA[testing blog posts]]></summary></entry></feed>