<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-08-02T02:21:13-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Johanna’s blog</title><subtitle>A place where I document new discoveries in my computer science journey. (and a place where you can learn more about me!)</subtitle><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><entry><title type="html">How to make your terminal pretty</title><link href="http://localhost:4000/projects/how-to-make-your-terminal-pretty/" rel="alternate" type="text/html" title="How to make your terminal pretty" /><published>2024-08-02T00:00:00-04:00</published><updated>2024-08-02T02:16:08-04:00</updated><id>http://localhost:4000/projects/how-to-make-your-terminal-pretty</id><content type="html" xml:base="http://localhost:4000/projects/how-to-make-your-terminal-pretty/"><![CDATA[<!--postNo: 2024-08-02-->

<p>Tired of staring at your boring terminal that doesn’t even have shortcuts?</p>

<p>Time to learn iterm ฅ^._.^ฅ</p>

<p>Here’s a screenshot of my cute terminal for your reference:</p>

<figure>
                      <img src="https://res.cloudinary.com/df2rp6zoo/image/upload/v1722579373/no8arq87aquvcmumf2bq.png" alt="" />
                      <figcaption></figcaption>
                  </figure>

<h3 id="instructions">Instructions</h3>
<ol>
  <li>make sure your default shell is zsh
    <ul>
      <li><code class="language-plaintext highlighter-rouge">echo $SHELL</code>  should give you <code class="language-plaintext highlighter-rouge">/usr/bin/zsh</code></li>
      <li>if not, do: <code class="language-plaintext highlighter-rouge">brew install zsh</code>  and <code class="language-plaintext highlighter-rouge">chsh -s /bin/zsh</code></li>
      <li>restart your terminal</li>
    </ul>
  </li>
  <li>
    <p>install <code class="language-plaintext highlighter-rouge">Oh My Zsh</code></p>

    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code> sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
</code></pre></div>    </div>
  </li>
  <li>Download ITerm2: <a href="http://www.iterm2.com/">iterm2.com</a></li>
  <li>Install an iTerm Theme
    <ul>
      <li>Here, I’ll add mine but you can add whatever theme you want</li>
      <li>all instructions below are from the theme owner’s repository: <a href="https://github.com/dogrocker/oh-my-zsh-powerline-cute-theme?tab=readme-ov-file">https://github.com/dogrocker/oh-my-zsh-powerline-cute-theme?tab=readme-ov-file</a></li>
      <li>Part 1:
        <ul>
          <li>download powerline compatible fonts like <a href="http://input.fontbureau.com/">Input Mono</a></li>
          <li>Make sure terminal is using 256-colors mode with <code class="language-plaintext highlighter-rouge">export TERM="xterm-256color"</code></li>
          <li>Download the theme: <a href="http://raw.github.com/dogrocker/oh-my-zsh-powerline-cute-theme/master/cute-theme.zsh-theme">here</a></li>
          <li>Put the file <strong>cute-theme.zsh-theme</strong> in <strong>~/.oh-my-zsh/themes/</strong></li>
          <li>Configure the theme in your <strong>~/.zshrc</strong> file:<code class="language-plaintext highlighter-rouge">ZSH_THEME="cute-theme"</code> ( you can open the file with <code class="language-plaintext highlighter-rouge">open ~/.zshrc</code></li>
        </ul>
      </li>
      <li>Part 2:
        <ul>
          <li>Launch iTerm 2</li>
          <li>Type CMD+i (⌘+i)</li>
          <li>Navigate to <strong>Colors</strong> tab</li>
          <li>Click on <strong>Color Presets</strong></li>
          <li>Click on <strong>Import</strong></li>
          <li>Click on the <strong>schemes</strong> folder</li>
          <li>Select the <strong>.itermcolors</strong> profiles you would like to import</li>
          <li>Click on <strong>Color Presets</strong> and choose a color scheme</li>
          <li>For <a href="http://iterm2.com/">iTerm 2</a> users, make sure you go into your settings and set both the regular font and the non-ascii font to powerline compatible <a href="https://github.com/powerline/fonts">fonts</a> or the prompt separators and special characters will not display correctly.</li>
          <li>you can change the emoji (default is <code class="language-plaintext highlighter-rouge">~</code> ) by adding this line to .zshrc: <code class="language-plaintext highlighter-rouge">BULLETTRAIN_PROMPT_CHAR="🐹 "</code></li>
        </ul>
      </li>
      <li>Part 3: Add Extra features
        <ul>
          <li>add background image: profile &gt; window &gt; background image</li>
          <li>command-click opens filename/url: pointer &gt; general</li>
        </ul>
      </li>
      <li>Part 4: Adding keyboard shortcut for opening iTerm 2
        <ul>
          <li>create automaton service
            <ul>
              <li>search (<code class="language-plaintext highlighter-rouge">⌘+space</code> ) for Automator.app on your computer</li>
              <li>select <code class="language-plaintext highlighter-rouge">workflow</code></li>
              <li>on the top search bar, search <code class="language-plaintext highlighter-rouge">Launch Application</code> and double click</li>
              <li>select iTerm2 and save (<code class="language-plaintext highlighter-rouge">⌘+s</code>) the workflow</li>
            </ul>
          </li>
          <li>set up keyboard shortcut
            <ul>
              <li>open  the <code class="language-plaintext highlighter-rouge">shortcuts</code>  application and add a new shortcut</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="shortcuts">Shortcuts</h3>
<p>iTerm + Shell shortcuts in general</p>

<table>
  <thead>
    <tr>
      <th><strong>Function</strong></th>
      <th><strong>Shortcut</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>New Tab</td>
      <td><code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">T</code></td>
    </tr>
    <tr>
      <td>Close Tab or Window</td>
      <td><code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">W</code> (same as many mac apps)</td>
    </tr>
    <tr>
      <td>Split Window Vertically</td>
      <td><code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">D</code></td>
    </tr>
    <tr>
      <td>Split Window Horizontally</td>
      <td><code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">D</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>delete everything on line</th>
      <th><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">U</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>search function</td>
      <td><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">R</code></td>
    </tr>
    <tr>
      <td>go back and forth by word</td>
      <td><code class="language-plaintext highlighter-rouge">⌥</code> + <code class="language-plaintext highlighter-rouge">Left/Right Arrow Keys</code></td>
    </tr>
  </tbody>
</table>

<p>and that’s how you get a pretty terminal!</p>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="projects" /><category term="project" /><category term="terminal" /><category term="personalization" /><summary type="html"><![CDATA[when you are sick and tired of your boring terminal]]></summary></entry><entry><title type="html">python review (ongoing)</title><link href="http://localhost:4000/project/python-review-ongoing/" rel="alternate" type="text/html" title="python review (ongoing)" /><published>2024-07-31T00:00:00-04:00</published><updated>2024-07-31T22:04:23-04:00</updated><id>http://localhost:4000/project/python-review-ongoing</id><content type="html" xml:base="http://localhost:4000/project/python-review-ongoing/"><![CDATA[<h3 id="decorators"><a href="https://www.geeksforgeeks.org/decorators-in-python/">decorators</a></h3>

<ol>
  <li>def: wrap another function to extend the behavior of the wrapped function w/o permanently modifying it</li>
  <li>Python first class objects
    <ol>
      <li>properties of <a href="https://www.geeksforgeeks.org/first-class-functions-python/">first class functions</a>:
        <ol>
          <li>func is an instance of the Object type</li>
          <li>store the func in a variable</li>
          <li>pass the func as a parameter to another</li>
          <li>you can return the func from a func</li>
          <li>you can store funcs in data structures</li>
        </ol>
      </li>
      <li>
        <p>ex)</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">shout</span><span class="p">(</span><span class="n">text</span><span class="p">):</span> 
     <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="n">upper</span><span class="p">()</span> 
		    
 <span class="c1"># EXAMPLE 1
</span> <span class="n">yell</span> <span class="o">=</span> <span class="n">shout</span> 
 <span class="k">print</span> <span class="p">(</span><span class="n">yell</span><span class="p">(</span><span class="s">'Hello'</span><span class="p">))</span> <span class="c1"># same as printing shout('Hello')
</span>		
 <span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">func</span><span class="p">):</span> 
     <span class="c1"># storing the function in a variable 
</span>     <span class="n">greeting</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="s">"""Hi, I am created by a function 
                     passed as an argument."""</span><span class="p">)</span> 
     <span class="k">print</span> <span class="p">(</span><span class="n">greeting</span><span class="p">)</span>  
		
 <span class="c1"># EXAMPLE 2
</span> <span class="n">greet</span><span class="p">(</span><span class="n">shout</span><span class="p">)</span> <span class="c1">#returns all uppercase
</span>		
 <span class="c1"># EXAMPLE 3
</span> <span class="k">def</span> <span class="nf">create_adder</span><span class="p">(</span><span class="n">x</span><span class="p">):</span> 
     <span class="k">def</span> <span class="nf">adder</span><span class="p">(</span><span class="n">y</span><span class="p">):</span> 
         <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span> 
		  
     <span class="k">return</span> <span class="n">adder</span> <span class="c1"># returns a function
</span>		
 <span class="n">add_15</span> <span class="o">=</span> <span class="n">create_adder</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="c1"># a func that adds 15
</span> <span class="k">print</span> <span class="p">(</span><span class="n">add_15</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> 
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
  <li>Decorators
    <ol>
      <li>functions are taken as the argument into another function and then called inside the wrapper function</li>
    </ol>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">@</span><span class="n">gfg_decorator</span>
 <span class="k">def</span> <span class="nf">hello_decorator</span><span class="p">():</span>
     <span class="k">print</span><span class="p">(</span><span class="s">"Gfg"</span><span class="p">)</span> 
	    
	    
 <span class="c1"># SAME AS   
</span> <span class="n">hello_decorator</span> <span class="o">=</span> <span class="n">gfg_decorator</span><span class="p">(</span><span class="n">hello_decorator</span><span class="p">)</span>
	
 <span class="c1">######################################
</span>	
 <span class="c1"># defining a decorator
</span> <span class="k">def</span> <span class="nf">hello_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
	
     <span class="k">def</span> <span class="nf">inner1</span><span class="p">():</span> <span class="c1"># wrapper function
</span>     <span class="s">"""
     can access the outer functions (func)
     """</span>
         <span class="k">print</span><span class="p">(</span><span class="s">"Hello, this is before function execution"</span><span class="p">)</span>
         <span class="n">func</span><span class="p">()</span> <span class="c1"># calling the actual function
</span>         <span class="k">print</span><span class="p">(</span><span class="s">"This is after function execution"</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">inner1</span>
	
 <span class="c1"># defining a function, to be called inside wrapper
</span> <span class="k">def</span> <span class="nf">function_to_be_used</span><span class="p">():</span>
	
     <span class="k">print</span><span class="p">(</span><span class="s">"This is inside the function !!"</span><span class="p">)</span>
	 
 <span class="c1"># passing 'function_to_be_used' inside the
</span> <span class="c1"># decorator to control its behaviour
</span> <span class="n">function_to_be_used</span> <span class="o">=</span> <span class="n">hello_decorator</span><span class="p">(</span><span class="n">function_to_be_used</span><span class="p">)</span>
	 
 <span class="n">function_to_be_used</span><span class="p">()</span>
	
 <span class="c1">######################################
</span>	
 <span class="c1"># importing libraries
</span> <span class="kn">import</span> <span class="nn">time</span>
 <span class="kn">import</span> <span class="nn">math</span>
	 
 <span class="c1"># decorator to calculate duration taken by any function.
</span> <span class="k">def</span> <span class="nf">calculate_time</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
	
     <span class="k">def</span> <span class="nf">inner1</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span> <span class="c1">#func takes any arguments
</span>	    
         <span class="c1"># storing time before function execution
</span>         <span class="n">begin</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
	         
         <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
	 
         <span class="c1"># storing time after function execution
</span>         <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
         <span class="k">print</span><span class="p">(</span><span class="s">"Total time taken in : "</span><span class="p">,</span> <span class="n">func</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">begin</span><span class="p">)</span>
	 
     <span class="k">return</span> <span class="n">inner1</span>
	    
 <span class="c1"># this can be added to any function present,
</span> <span class="c1"># ex) calculating a factorial
</span> <span class="o">@</span><span class="n">calculate_time</span>
 <span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
     <span class="k">print</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">factorial</span><span class="p">(</span><span class="n">num</span><span class="p">))</span>
	 
 <span class="c1"># calling the function.
</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
	
 <span class="s">"""
 3628800
 Total time taken in : factorial 0.0061802864074707
 """</span>
	
	
 <span class="c1">######################################
</span> <span class="c1">#What if a func returns something
</span>	 
 <span class="o">@</span><span class="n">hello_decorator</span>
 <span class="k">def</span> <span class="nf">sum_two_numbers</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
     <span class="k">print</span><span class="p">(</span><span class="s">"Inside the function"</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
	 
 <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
	 
 <span class="c1"># getting the value through return of the function
</span> <span class="k">print</span><span class="p">(</span><span class="s">"Sum ="</span><span class="p">,</span> <span class="n">sum_two_numbers</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
	
 <span class="s">"""
 before Execution
 Inside the function
 after Execution
 Sum = 3
 """</span>
	
 <span class="c1">######################################
</span> <span class="c1">#chaining decorators
</span>	
 <span class="k">def</span> <span class="nf">decor1</span><span class="p">(</span><span class="n">func</span><span class="p">):</span> 
     <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span> 
         <span class="n">x</span> <span class="o">=</span> <span class="n">func</span><span class="p">()</span> 
         <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> 
     <span class="k">return</span> <span class="n">inner</span> 
	 
 <span class="k">def</span> <span class="nf">decor</span><span class="p">(</span><span class="n">func</span><span class="p">):</span> 
     <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span> 
         <span class="n">x</span> <span class="o">=</span> <span class="n">func</span><span class="p">()</span> 
         <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span> 
     <span class="k">return</span> <span class="n">inner</span> 
	 
 <span class="o">@</span><span class="n">decor1</span>
 <span class="o">@</span><span class="n">decor</span>
 <span class="k">def</span> <span class="nf">num</span><span class="p">():</span> 
     <span class="k">return</span> <span class="mi">10</span>
	   
 <span class="k">print</span><span class="p">(</span><span class="n">num</span><span class="p">())</span> <span class="c1">#400 (from (2*10)*(20)). i.e.,  decor1(decor(num)))
</span></code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="project" /><category term="python" /><summary type="html"><![CDATA[just some python review]]></summary></entry><entry><title type="html">[QAI] Final Board Summary</title><link href="http://localhost:4000/stats/qai-final-board-summary/" rel="alternate" type="text/html" title="[QAI] Final Board Summary" /><published>2024-07-31T00:00:00-04:00</published><updated>2024-07-31T03:58:10-04:00</updated><id>http://localhost:4000/stats/qai-final-board-summary</id><content type="html" xml:base="http://localhost:4000/stats/qai-final-board-summary/"><![CDATA[<p>inspired by: https://recipesds.tistory.com/</p>

<h3 id="overview">Overview</h3>

<figure>
                      <img src="https://res.cloudinary.com/df2rp6zoo/image/upload/v1722412744/brmr607m7vkeopv3cmp0.jpg" alt="" />
                      <figcaption></figcaption>
                  </figure>

<h3 id="central-limit-theorem">Central Limit Theorem</h3>

<figure>
                      <img src="https://res.cloudinary.com/df2rp6zoo/image/upload/v1722412745/mzdosneuqoyjxsafwujb.jpg" alt="" />
                      <figcaption></figcaption>
                  </figure>

<h3 id="distribution">Distribution</h3>

<figure>
                      <img src="https://res.cloudinary.com/df2rp6zoo/image/upload/v1722412747/hbemkdb4yezf20wd59ot.jpg" alt="" />
                      <figcaption></figcaption>
                  </figure>

<figure>
                      <img src="https://res.cloudinary.com/df2rp6zoo/image/upload/v1722412748/r3esturiohulesq6brq6.jpg" alt="" />
                      <figcaption></figcaption>
                  </figure>

<h3 id="testing">Testing</h3>

<figure>
                      <img src="https://res.cloudinary.com/df2rp6zoo/image/upload/v1722412749/um3g9qwq3aw3jlnrzh7g.jpg" alt="" />
                      <figcaption></figcaption>
                  </figure>

<figure>
                      <img src="https://res.cloudinary.com/df2rp6zoo/image/upload/v1722412750/w6lrft7t5ro1lyrliop2.jpg" alt="" />
                      <figcaption></figcaption>
                  </figure>

<h3 id="regression">Regression</h3>

<figure>
                      <img src="https://res.cloudinary.com/df2rp6zoo/image/upload/v1722412751/oala5ii3ysatzbctpyoc.jpg" alt="" />
                      <figcaption></figcaption>
                  </figure>

<figure>
                      <img src="https://res.cloudinary.com/df2rp6zoo/image/upload/v1722412752/rppthmqidus363uy9dok.jpg" alt="" />
                      <figcaption></figcaption>
                  </figure>

<p>AND WE’RE DONE!</p>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="stats" /><category term="qai" /><category term="review" /><category term="statistics" /><category term="inference" /><summary type="html"><![CDATA[looking at the bigger picture]]></summary></entry><entry><title type="html">Is Mathematics Invented or Discovered?</title><link href="http://localhost:4000/life/is-mathematics-invented-or-discovered/" rel="alternate" type="text/html" title="Is Mathematics Invented or Discovered?" /><published>2024-07-30T00:00:00-04:00</published><updated>2024-07-30T23:32:48-04:00</updated><id>http://localhost:4000/life/is-mathematics-invented-or-discovered</id><content type="html" xml:base="http://localhost:4000/life/is-mathematics-invented-or-discovered/"><![CDATA[<!--postNo: 2024-07-30-->

<p>Thoughts on Roger Penrose’s  interview: Is Mathematics Invented or Discovered?</p>

<p>Link to interview: <a href="https://www.whyarewehere.tv/people/roger-penrose/">https://www.whyarewehere.tv/people/roger-penrose/</a></p>

<h3 id="is-mathematics-something-that-we-discover-or-just-something-that-were-making-up">Is mathematics something that we discover or just something that we’re making up?</h3>

<blockquote>
  <p>RP: Now, you see, the thing is, what’s deep about it is that if you introduce this notion ‒ which at first sight looks like an invention ‒ it unfolds an entire world that you had no conception of, and you didn’t invent that: that came as a gift.</p>
</blockquote>

<p>In middle school I used to feel <em>bad</em> for imaginary numbers; the little i seemed so lonely alone, not being able to join its real number friends unless it found another imaginary number i to join. This interview brings me back to this memory, but with a different point of view; the imaginary number now reminds me of Hagrid from Harry Potter, who led the young boy to the world of magic. When Hagrid shows up on his doorstep, Harry realizes the wizarding world has always coexisted with the muggle world. At this moment, he revisits all the unexplainable, crazy events that had intruded his life — like the snake talking — as long as he could remember. Would it have been possible for Harry to wake up one day and the idea of a wizarding world where a bad guy called Voldemort trying to kill him to suddenly strike him? No. But Harry could have reached platform 9 3/4 without Hagrid. He could have managed to snatch the Hogwarts letter before uncle Vernon did, or he could have learned to control and use his magic skills alone. In one way or the other, he would have arrived at the same destination that is the wizarding world. Likewise, we could have decided on a different way to define the square root of minus one, instead of the i we have right now. But that invention would have also opened up a new world of quantum mechanics too, just like how the imaginary number i did.</p>

<blockquote>
  <p>Number theory? Does that have any relevance to the physical world? Maybe, we don’t know. There’s no particular importance, maybe a few odd things, but nothing of really great importance which seems to have developed in the physical world – that may be a temporary thing.</p>
</blockquote>

<p>It’s interesting how Number theory has become so important and widely used in computer science, in fields like crypotgraphy and alogirhtm design. One of the first cs class I took was called “Mathematics for Computer Science” where we went over number theory (fermat’s little theorem! Counting! RSA!) extensively.</p>

<blockquote>
  <p>RP: I think that’s not the way I would look at things completely. You see it’s all to do with this consciousness issue, and I think something else comes in which is outside the science that we presently know. It doesn’t mean it’s outside science. So you see, when you’re asking me is it all science, well, science is limited at the moment, because it only deals with certain areas which don’t include that.</p>
</blockquote>

<p>What divides natural and supernatural? Why do humans choose to put their faith in a supernatural realm, beyond our universe, when all that we percieve is the natural world? Is it also an invention that we created to reach beyond our physical perceptions, like how the imaginary number revealed the quantum world to us? Maybe then both faith and mathematics are just two differnet methods to reach the same destination.</p>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="life" /><category term="thoughts" /><category term="mathematics" /><category term="philosophy" /><summary type="html"><![CDATA[philosophical thoughts revisited]]></summary></entry><entry><title type="html">[ssh key] for first time git users</title><link href="http://localhost:4000/project/ssh-key-for-first-time-git-users/" rel="alternate" type="text/html" title="[ssh key] for first time git users" /><published>2024-07-27T00:00:00-04:00</published><updated>2024-07-30T23:16:27-04:00</updated><id>http://localhost:4000/project/ssh-key-for-first-time-git-users</id><content type="html" xml:base="http://localhost:4000/project/ssh-key-for-first-time-git-users/"><![CDATA[<!--postNo: 2024-07-30-->

<h3 id="connect">Connect!</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/.ssh
ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-C</span> <span class="s2">"your-email-address"</span> <span class="nt">-f</span> <span class="s2">"github-username"</span>
ssh-add <span class="nt">-K</span> ~/.ssh/github-username
pbcopy &lt; ~/.ssh/github-username.pub
</code></pre></div></div>

<p>now paste it into your settings&gt; new ssh key</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> .ssh
<span class="nb">touch </span>config <span class="c"># if config file does not exist</span>
open config
</code></pre></div></div>

<p>add this to the config file:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Johanna Github</span>
Host github.com-hl105
	HostName github.com
	User git
	IdentityFile ~/.ssh/github-hl105
</code></pre></div></div>

<h3 id="qa">Q&amp;A</h3>

<p>Q: I’m getting this scary message: <code class="language-plaintext highlighter-rouge">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY</code></p>

<p>A: go to .ssh/known_hosts and get the host name: something like <code class="language-plaintext highlighter-rouge">192.168.3.10</code></p>

<p>Then do:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen -R &lt;host&gt; 
</code></pre></div></div>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="project" /><category term="git" /><category term="ssh-key" /><category term="system" /><summary type="html"><![CDATA[welcome to programming]]></summary></entry><entry><title type="html">streamlit 101</title><link href="http://localhost:4000/project/streamlit-101/" rel="alternate" type="text/html" title="streamlit 101" /><published>2024-07-24T00:00:00-04:00</published><updated>2024-07-24T21:58:50-04:00</updated><id>http://localhost:4000/project/streamlit-101</id><content type="html" xml:base="http://localhost:4000/project/streamlit-101/"><![CDATA[<!--postNo: 2024-07-24-->

<p>learning how to use streamlit for simple web apps in Python</p>

<h3 id="introduction">Introduction</h3>
<ol>
  <li><a href="https://docs.streamlit.io/get-started/fundamentals/main-concepts"><strong>Streamlit info</strong></a>
    <ol>
      <li>Streamlit reruns your entire Python script from top to bottom any time something needs to be updated on the page
        <ol>
          <li>Whenever the app’s source code is modified</li>
          <li>Whenever a user interacts with widgets in the app. e.g. entering text, clicking a button.</li>
        </ol>
      </li>
    </ol>
  </li>
  <li><strong>Initialization (coding right into browser)</strong>
    <ol>
      <li>connect your Github account</li>
      <li>create a new app, click “open github codespace”</li>
      <li>open streamlit_app.py, compare with “simple browser” tab to understand the code</li>
    </ol>
  </li>
</ol>

<h3 id="basic-commands">Basic Commands</h3>
<ol>
  <li>
    <p><strong>Basic commands</strong></p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> streamlit run your_script.py <span class="o">[</span><span class="nt">--</span> script args]
</code></pre></div>    </div>

    <ol>
      <li><a href="https://docs.streamlit.io/develop/api-reference">API Link</a></li>
      <li><a href="https://docs.streamlit.io/develop/api-reference/write-magic/magic">“magic” commands</a>
        <ol>
          <li>Any time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using <a href="https://docs.streamlit.io/develop/api-reference/write-magic/st.write"><code class="language-plaintext highlighter-rouge">st.write</code></a></li>
        </ol>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># Draw a title and some text to the app:
</span> <span class="s">'''
 # This is the document title
		
 This is some _markdown_.
 '''</span>
		
 <span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
 <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'col1'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]})</span>
 <span class="n">df</span>  <span class="c1"># 👈 Draw the dataframe
</span>		
 <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
 <span class="s">'x'</span><span class="p">,</span> <span class="n">x</span>  <span class="c1"># 👈 Draw the string 'x' and then the value of x
</span>		
 <span class="c1"># Also works with most supported chart types
</span> <span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
 <span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
		
 <span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
 <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
 <span class="n">ax</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
		
 <span class="n">fig</span>  <span class="c1"># 👈 Draw a Matplotlib chart
</span></code></pre></div>        </div>
      </li>
      <li><a href="https://docs.streamlit.io/develop/api-reference/write-magic/st.write">st.write</a>
        <ol>
          <li>You can pass in multiple arguments, all of which will be written.</li>
          <li>Its behavior depends on the input types as follows.</li>
          <li>It returns None, so its “slot” in the App cannot be reused.</li>
        </ol>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">import</span> <span class="nn">streamlit</span> <span class="k">as</span> <span class="n">st</span>
 <span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
		
 <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"Here's our first attempt at using data to create a table:"</span><span class="p">)</span>
 <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
     <span class="s">'first column'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
     <span class="s">'second column'</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">]</span>
 <span class="p">}))</span>
</code></pre></div>        </div>

        <p>d. when to not use st.write?</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">import</span> <span class="nn">streamlit</span> <span class="k">as</span> <span class="n">st</span>
 <span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
 <span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
		
 <span class="c1"># example 1
</span> <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span>
     <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span>
     <span class="n">columns</span><span class="o">=</span><span class="p">(</span><span class="s">'col %d'</span> <span class="o">%</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">)))</span>
		
 <span class="n">st</span><span class="p">.</span><span class="n">dataframe</span><span class="p">(</span><span class="n">dataframe</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">highlight_max</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
 <span class="c1"># can use Pandas Styler object to highlight some elements in the interactive table.
</span>		
 <span class="c1"># example 2
</span> <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span>
      <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
      <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">])</span>
		
 <span class="n">st</span><span class="p">.</span><span class="n">line_chart</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="c1">#add a line chart 
</span>		
 <span class="c1"># example 3
</span> <span class="n">st</span><span class="p">.</span><span class="nb">map</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="c1"># display data points on a map
</span></code></pre></div>        </div>
      </li>
    </ol>

    <p>d. widgets</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ```python
	
 # when user moves the slider to position 10, Streamlit will rerun the code above
 # and set x to 10 accordingly. New result "10 squared is 100".
	
 #accessing by variable
 x = st.slider('x')  # 👈 this is a widget
 st.write(x, 'squared is', x * x)
	
 #accessing by key:
 # specify a string to use as the unique key for the widget
 st.text_input("Your name", key="name")
 st.session_state.name # to access the value. Automatically added to Session State
 ```
</code></pre></div>    </div>

    <p>e. st.checkbox</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ```python
 if st.checkbox('Show dataframe'):
     chart_data = pd.DataFrame(
        np.random.randn(20, 3),
        columns=['a', 'b', 'c'])
	       
     chart_data
 ```
</code></pre></div>    </div>

    <p>f. st.selectbox</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">option</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">selectbox</span><span class="p">(</span>
     <span class="s">"How would you like to be contacted?"</span><span class="p">,</span>
     <span class="p">(</span><span class="s">"Email"</span><span class="p">,</span> <span class="s">"Home phone"</span><span class="p">,</span> <span class="s">"Mobile phone"</span><span class="p">))</span>
	
 <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"You selected:"</span><span class="p">,</span> <span class="n">option</span><span class="p">)</span>
</code></pre></div>    </div>

    <p>g. layout</p>

    <ul>
      <li>
        <p><a href="https://docs.streamlit.io/develop/api-reference/layout/st.sidebar"><code class="language-plaintext highlighter-rouge">st.sidebar</code></a>: left panel sidebar</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># Add a selectbox to the sidebar:
</span>  <span class="n">add_selectbox</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">sidebar</span><span class="p">.</span><span class="n">selectbox</span><span class="p">(</span>
      <span class="s">'How would you like to be contacted?'</span><span class="p">,</span>
      <span class="p">(</span><span class="s">'Email'</span><span class="p">,</span> <span class="s">'Home phone'</span><span class="p">,</span> <span class="s">'Mobile phone'</span><span class="p">)</span>
  <span class="p">)</span>
		
  <span class="c1"># Add a slider to the sidebar:
</span>  <span class="n">add_slider</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">sidebar</span><span class="p">.</span><span class="n">slider</span><span class="p">(</span>
      <span class="s">'Select a range of values'</span><span class="p">,</span>
      <span class="mf">0.0</span><span class="p">,</span> <span class="mf">100.0</span><span class="p">,</span> <span class="p">(</span><span class="mf">25.0</span><span class="p">,</span> <span class="mf">75.0</span><span class="p">)</span>
  <span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">st.columns</code>: place widgets side-by-side</li>
      <li>
        <p><a href="https://docs.streamlit.io/develop/api-reference/layout/st.expander"><code class="language-plaintext highlighter-rouge">st.expander</code></a> : conserve space by hiding away large content</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">left_column</span><span class="p">,</span> <span class="n">right_column</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
  <span class="c1"># You can use a column just like st.sidebar:
</span>  <span class="n">left_column</span><span class="p">.</span><span class="n">button</span><span class="p">(</span><span class="s">'Press me!'</span><span class="p">)</span>
		
  <span class="c1"># Or even better, call Streamlit functions inside a "with" block:
</span>  <span class="k">with</span> <span class="n">right_column</span><span class="p">:</span>
      <span class="n">chosen</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">radio</span><span class="p">(</span>
          <span class="s">'Sorting hat'</span><span class="p">,</span>
          <span class="p">(</span><span class="s">"Gryffindor"</span><span class="p">,</span> <span class="s">"Ravenclaw"</span><span class="p">,</span> <span class="s">"Hufflepuff"</span><span class="p">,</span> <span class="s">"Slytherin"</span><span class="p">))</span>
      <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"You are in </span><span class="si">{</span><span class="n">chosen</span><span class="si">}</span><span class="s"> house!"</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>

    <p>h. st.progress</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ```python
 # Add a placeholder
 latest_iteration = st.empty()
 bar = st.progress(0)
	
 for i in range(100):
   # Update the progress bar with each iteration.
   latest_iteration.text(f'Iteration {i+1}')
   bar.progress(i + 1)
   time.sleep(0.1)
	
 '...and now we\'re done!'
 ```
</code></pre></div>    </div>
  </li>
  <li>
    <p><a href="https://docs.streamlit.io/get-started/fundamentals/advanced-concepts">advanced concepts</a> (efficiency)</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	
 <span class="o">@</span><span class="n">st</span><span class="p">.</span><span class="n">cache_data</span>
 <span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="n">nrows</span><span class="p">):</span>
</code></pre></div>    </div>

    <ol>
      <li>Caching:save the output of a function so you can skip over it on rerun.</li>
      <li>Session States: save information for each user that is preserved between reruns.
        <ul>
          <li>review cs240 caching notes!</li>
        </ul>
      </li>
    </ol>

    <p>c. st.cache_data</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> - tells Streamlit that whenever the function is called that it should check two things:
     - the input parameters you used for the function call
     - the code inside the function.
 - should avoid mutating the output of a function cached with `st.cache_data` since cached values are stored by reference
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="project" /><category term="python" /><category term="visualization" /><summary type="html"><![CDATA[python! visualizations!]]></summary></entry><entry><title type="html">cron tutorial</title><link href="http://localhost:4000/project/cron-tutorial/" rel="alternate" type="text/html" title="cron tutorial" /><published>2024-07-17T00:00:00-04:00</published><updated>2024-07-17T17:58:35-04:00</updated><id>http://localhost:4000/project/cron-tutorial</id><content type="html" xml:base="http://localhost:4000/project/cron-tutorial/"><![CDATA[<h3 id="setting-up-cron">setting up cron</h3>

<ul>
  <li>create scripts folder <code class="language-plaintext highlighter-rouge">mkdir scripts</code></li>
  <li>create your direction file <code class="language-plaintext highlighter-rouge">touch run_gtrends_politics.sh</code>  in it</li>
  <li>
    <p>write what you want to repeat in that shell script:</p>

    <p>if you don’t have virtual environments, you don’t need the env activation lines</p>

    <p><strong>example 1: if z shell &amp; conda</strong></p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c">#!/usr/bin/env zsh</span><span class="w">
	
  </span><span class="n">source</span><span class="w"> </span><span class="nx">~/.zshrc</span><span class="w"> </span><span class="c">#we need this</span><span class="w">
  </span><span class="n">echo</span><span class="w"> </span><span class="nv">$SHELL</span><span class="w">
  </span><span class="n">conda</span><span class="w"> </span><span class="nx">activate</span><span class="w"> </span><span class="nx">ml</span><span class="w">
  </span><span class="n">cd</span><span class="w">  </span><span class="nx">/Users/ihoonsun/Desktop/summer\</span><span class="w"> </span><span class="nx">projects/sci/summer2024/gtrends_politics</span><span class="w">
  </span><span class="n">python</span><span class="w"> </span><span class="nx">example_script.py</span><span class="w">
  </span><span class="n">conda</span><span class="w"> </span><span class="nx">deactivate</span><span class="w">
</span></code></pre></div>    </div>

    <p><strong>example 2: if bash shell &amp; venv:</strong></p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c">#!/bin/bash</span><span class="w">
  </span><span class="n">echo</span><span class="w"> </span><span class="nv">$SHELL</span><span class="w">
  </span><span class="n">export</span><span class="w"> </span><span class="nx">PATH</span><span class="o">=</span><span class="s2">"/Users/ihoonsun/environments/naver-venv/bin:</span><span class="nv">$PATH</span><span class="s2">"</span><span class="w">
  </span><span class="n">source</span><span class="w"> </span><span class="nx">/Users/ihoonsun/environments/naver-venv/bin/activate</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">[[</span><span class="w"> </span><span class="s2">"</span><span class="si">$(</span><span class="n">which</span><span class="w"> </span><span class="nx">python</span><span class="p">)</span><span class="s2">" == "</span><span class="n">/Users/ihoonsun/environments/naver-venv/bin/python</span><span class="s2">" ]]; then
      echo "</span><span class="nx">venv</span><span class="w"> </span><span class="nx">activated</span><span class="s2">"
  else
      echo "</span><span class="nx">failed</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">activate</span><span class="s2">"
  fi
  cd /Users/ihoonsun/Desktop/naver 
  /Users/ihoonsun/environments/naver-venv/bin/python3.8  -m pytest scraper.py --headless #run pytest
  deactivate
	
</span></code></pre></div>    </div>
  </li>
  <li>open shell configuration file and add  environment variables if needed
    <ul>
      <li>ex) your openai API key</li>
    </ul>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c">#directions</span><span class="w">
  </span><span class="c"># setting API_KEY environment variable</span><span class="w">
  </span><span class="c"># open shell configuration file  (~/.bashrc, ~/.bash_profile, or ~/.zshrc)</span><span class="w">
  </span><span class="c"># write: export API_KEY=your_api_key_value and save</span><span class="w">
  </span><span class="c"># check if it saved correctly by: echo $API_KEY</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">crontab -e</code>  to open crontab.</li>
  <li><code class="language-plaintext highlighter-rouge">0 7-23 * * * /Users/ihoonsun/scripts/run_pytest.sh</code> add to crontab</li>
  <li>you can check crontab with <code class="language-plaintext highlighter-rouge">crontab -l</code></li>
</ul>

<h3 id="qa-section">Q&amp;A section</h3>

<p><strong>problem</strong>: need to do conda init before you need to conda activate</p>

<p><strong>solution</strong>: <code class="language-plaintext highlighter-rouge">source ~/.bashrc</code>  → <code class="language-plaintext highlighter-rouge">conda init --all</code></p>

<hr />

<p><strong>problem</strong>: conda (base) shows up on terminal prompt</p>

<p><strong>solution</strong>: <code class="language-plaintext highlighter-rouge">conda config --set auto_activate_base False</code></p>

<hr />

<p><strong>problem</strong>: permissioned denied to some file</p>

<p><strong>solution:</strong> <code class="language-plaintext highlighter-rouge">chmod +x path/to/file</code> (chmod: command to change file permissions, +x: adds executable permission to file)</p>

<hr />

<p><strong>problem:</strong> editor isn’t nano</p>

<p><strong>solution</strong>: <code class="language-plaintext highlighter-rouge">export EDITOR=nano</code> (sets nano to default), for crontab→ <code class="language-plaintext highlighter-rouge">export VISUAL=nano</code></p>

<hr />

<p><strong>problem</strong>: command not found</p>

<p><strong>solution</strong>: check shebang (character sequence at the beginning of a script that specifies the path to the interpreter that should execute the script) &amp; <strong>source the z shell</strong> becaues cron jobs run in a much more limited environment compared to your interactive shell session, we need the .zshrc to be executed because it’s where we initialized conda</p>

<h3 id="extra-information-thank-you-stackoverflow-google-and-chatgpt">Extra information (thank you StackOverflow, Google, and chatGPT)</h3>

<ul>
  <li><strong>what is z shell / bash shell?</strong>
    <ul>
      <li>zsh: Unix shell that can be used as an interactive login shell and as a powerful command interpreter for shell scripting. Incorporates features of other shells such as <code class="language-plaintext highlighter-rouge">bash</code>, <code class="language-plaintext highlighter-rouge">ksh</code>, and <code class="language-plaintext highlighter-rouge">tcsh</code>, making it highly versatile and customizable.</li>
      <li>bash: another Unix shell and command language, which is the default shell on many Linux distributions and macOS. It is an improved version of the original Bourne shell (<code class="language-plaintext highlighter-rouge">sh</code>)</li>
    </ul>
  </li>
  <li><strong>what is Shebang</strong> <strong><code class="language-plaintext highlighter-rouge">#!</code></strong><strong>?</strong>
    <ul>
      <li>a character sequence at the beginning of a script that specifies the path to the interpreter that should execute the script. Is followed by the absolute path to the interpreter.</li>
      <li>example usage: <code class="language-plaintext highlighter-rouge">#!/usr/bin/env zsh</code>  ← telling system to use the <code class="language-plaintext highlighter-rouge">zsh</code> interpreter found by the <code class="language-plaintext highlighter-rouge">env</code> command in the user’s environment.</li>
    </ul>
  </li>
  <li>
    <p><strong>what’s that line of code we’re adding to crontab?</strong></p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">*</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">*</span><span class="w">  </span><span class="kr">command</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="nx">execute</span><span class="w">
  </span><span class="err">┬</span><span class="w"> </span><span class="err">┬</span><span class="w"> </span><span class="err">┬</span><span class="w"> </span><span class="err">┬</span><span class="w"> </span><span class="err">┬</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">└───</span><span class="w"> </span><span class="n">day</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="nx">week</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">7</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">Sunday</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">0</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">7</span><span class="p">)</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">└─────</span><span class="w"> </span><span class="n">month</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">12</span><span class="p">)</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="err">└───────</span><span class="w"> </span><span class="n">day</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="nx">month</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">31</span><span class="p">)</span><span class="w">
  </span><span class="err">│</span><span class="w"> </span><span class="err">└─────────</span><span class="w"> </span><span class="n">hour</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">23</span><span class="p">)</span><span class="w">
  </span><span class="err">└───────────</span><span class="w"> </span><span class="n">minute</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">59</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="project" /><category term="tutorial" /><category term="scraping" /><summary type="html"><![CDATA[when you don't want to stay up all night collecting data]]></summary></entry><entry><title type="html">loguru</title><link href="http://localhost:4000/project/loguru/" rel="alternate" type="text/html" title="loguru" /><published>2024-07-16T00:00:00-04:00</published><updated>2024-07-30T23:37:29-04:00</updated><id>http://localhost:4000/project/loguru</id><content type="html" xml:base="http://localhost:4000/project/loguru/"><![CDATA[<!--postNo: 2024-07-30-->

<p>I’ve used <code class="language-plaintext highlighter-rouge">logging</code> so far, but this seems easier to use / better functionailties so I’ll try using this now</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="n">loguru</span>

<span class="kn">from</span> <span class="nn">loguru</span> <span class="kn">import</span> <span class="n">logger</span>
<span class="n">logger</span><span class="p">.</span><span class="n">debug</span><span class="p">(</span><span class="s">"Starting logging..."</span><span class="p">)</span>

<span class="o">@</span><span class="n">logger</span><span class="p">.</span><span class="n">catch</span>
<span class="k">def</span> <span class="nf">my_function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="c1"># An error? It's caught anyway!
</span>    <span class="k">return</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="n">z</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logger</span><span class="p">.</span><span class="n">trace</span><span class="p">(</span><span class="s">"A trace message."</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="n">debug</span><span class="p">(</span><span class="s">"A debug message."</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"An info message."</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="s">"A success message."</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="n">warning</span><span class="p">(</span><span class="s">"A warning message."</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="s">"An error message."</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="n">critical</span><span class="p">(</span><span class="s">"A critical message."</span><span class="p">)</span>
</code></pre></div></div>

<p>detailed error logs</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Caution, "diagnose=True" is the default and may leak sensitive data in prod
</span><span class="n">logger</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"out.log"</span><span class="p">,</span> <span class="n">backtrace</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">diagnose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span>

<span class="k">def</span> <span class="nf">nested</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">func</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ZeroDivisionError</span><span class="p">:</span>
        <span class="n">logger</span><span class="p">.</span><span class="n">exception</span><span class="p">(</span><span class="s">"What?!"</span><span class="p">)</span>

<span class="n">nested</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>gives u:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">2018</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">17</span> <span class="mi">01</span><span class="p">:</span><span class="mi">38</span><span class="p">:</span><span class="mf">43.975</span> <span class="o">|</span> <span class="n">ERROR</span>    <span class="o">|</span> <span class="n">__main__</span><span class="p">:</span><span class="n">nested</span><span class="p">:</span><span class="mi">10</span> <span class="o">-</span> <span class="n">What</span><span class="err">?!</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>

  <span class="n">File</span> <span class="s">"test.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">12</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="n">nested</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="err">└</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">nested</span> <span class="n">at</span> <span class="mh">0x7f5c755322f0</span><span class="o">&gt;</span>

<span class="o">&gt;</span> <span class="n">File</span> <span class="s">"test.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">8</span><span class="p">,</span> <span class="ow">in</span> <span class="n">nested</span>
    <span class="n">func</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
    <span class="err">│</span>       <span class="err">└</span> <span class="mi">0</span>
    <span class="err">└</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">func</span> <span class="n">at</span> <span class="mh">0x7f5c79fc2e18</span><span class="o">&gt;</span>

  <span class="n">File</span> <span class="s">"test.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">4</span><span class="p">,</span> <span class="ow">in</span> <span class="n">func</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span>
           <span class="err">│</span>   <span class="err">└</span> <span class="mi">0</span>
           <span class="err">└</span> <span class="mi">5</span>

<span class="nb">ZeroDivisionError</span><span class="p">:</span> <span class="n">division</span> <span class="n">by</span> <span class="n">zero</span>
</code></pre></div></div>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="project" /><category term="logging" /><category term="python" /><summary type="html"><![CDATA[better than logging and much better than printing]]></summary></entry><entry><title type="html">[QAI] Model Selection (week 7)</title><link href="http://localhost:4000/stats/qai-model-selection-week-7/" rel="alternate" type="text/html" title="[QAI] Model Selection (week 7)" /><published>2024-07-15T00:00:00-04:00</published><updated>2024-07-31T00:14:49-04:00</updated><id>http://localhost:4000/stats/qai-model-selection-week-7</id><content type="html" xml:base="http://localhost:4000/stats/qai-model-selection-week-7/"><![CDATA[<!--postNo: 2024-07-31-->

<h3 id="model-selection">Model Selection</h3>

<ol>
  <li>Intro to model selection (parametric)</li>
</ol>

<p>→ which terms to include in a linear model</p>

<p><strong>plan</strong>: choose a model that <strong>fits the data</strong> <strong>without using too manuy parameters</strong></p>

<p><strong>tradeoff</strong>: more parameters lead to better fit/smaller residuals but also lead to “over-fitting”</p>

<p><strong>overfitting</strong>: when the model too closley describes the data, not useful for generalization</p>

<ol>
  <li>measure of model fit
    <ul>
      <li>R^2 = 1 - SSR (residual varaiblity) / SST (overall variability) = SSModel/SST</li>
      <li>R^2: is the proportion of variability in the outcome variable that is due to the predictors in your model rather than noise</li>
      <li>i.e. the proportion of varaiblity explained by your model</li>
      <li>you can calculate R^2 from a linear regression model with any number of predictors or terms</li>
      <li>if you do have one predictor/term (simple linear regression), then R^2 = r^2</li>
      <li>R^2 increases (or at least does not decrease) every time a term is added to the model, even if the term is not useful</li>
      <li>so you can’t just chagne the model with the highest R^2</li>
    </ul>
  </li>
  <li>R-squared is equal to 1 when # of parameters equals number of data points ( you are overfitting)
    <ul>
      <li>prefer: many more data points than parameters to estimate</li>
    </ul>
  </li>
  <li>
    <p>when you consider a subset of predictors, either fewer predictors or a smaller range of any particular predictor, R^2 decreases.</p>

    <p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/46a454de-d143-4526-a01f-0f13adda7dcc/b2c03c28-ef36-4b57-83c1-816b75a5188e/Screenshot_2024-07-21_at_6.52.51_PM.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240731%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240731T041454Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=02e9fef069f89d32c739a120e3e11423a1ff784a1469fd7539ab4d474a152e66&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="Screenshot_2024-07-21_at_6.52.51_PM.png" /></p>
  </li>
  <li>
    <p>R^2 is not a measure of linearity</p>

    <p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/46a454de-d143-4526-a01f-0f13adda7dcc/26468104-a2fb-40a1-aac0-a98bf25795e3/Screenshot_2024-07-21_at_6.54.40_PM.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240731%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240731T041507Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=9ed18fb112d7f4a5aadb8540df2d19a0fe18ead24b431f639b46fcfacd8f8b75&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="Screenshot_2024-07-21_at_6.54.40_PM.png" /></p>
  </li>
</ol>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="stats" /><category term="QAI" /><category term="statistics" /><category term="model" /><summary type="html"><![CDATA[notes from week 7]]></summary></entry><entry><title type="html">[QAI] ANOVA &amp;amp; Regression (week 7)</title><link href="http://localhost:4000/stats/qai-anova-regression/" rel="alternate" type="text/html" title="[QAI] ANOVA &amp;amp; Regression (week 7)" /><published>2024-07-14T00:00:00-04:00</published><updated>2024-07-30T23:40:19-04:00</updated><id>http://localhost:4000/stats/qai-anova--regression</id><content type="html" xml:base="http://localhost:4000/stats/qai-anova-regression/"><![CDATA[<!--postNo: 2024-07-30-->

<p>all notes from QAI</p>

<p>Regression and ANOVA are different ways of formatting output from the same model</p>

<h3 id="one-predictor-categorical-or-continuous">One predictor, categorical or continuous</h3>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#data cleaning</span><span class="w">

</span><span class="n">attach</span><span class="p">(</span><span class="n">msleep</span><span class="p">)</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="n">bodywt</span><span class="p">,</span><span class="w"> </span><span class="n">sleep_total</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">bodywt</span><span class="p">,</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">sleep_total</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="nf">log</span><span class="p">(</span><span class="n">bodywt</span><span class="p">),</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">sleep_total</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="nf">log</span><span class="p">(</span><span class="n">bodywt</span><span class="p">),</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">sleep_total</span><span class="p">),</span><span class="w">
	</span><span class="n">col</span><span class="o">=</span><span class="n">as.factor</span><span class="p">(</span><span class="n">vore</span><span class="p">))</span><span class="w">
	
</span><span class="n">logwt</span><span class="o">&lt;-</span><span class="nf">log</span><span class="p">(</span><span class="n">bodywt</span><span class="p">)</span><span class="w">	
</span><span class="n">logsleep</span><span class="o">&lt;-</span><span class="nf">log</span><span class="p">(</span><span class="n">sleep_total</span><span class="p">)</span><span class="w">
</span><span class="n">vore</span><span class="o">&lt;-</span><span class="n">as.factor</span><span class="p">(</span><span class="n">vore</span><span class="p">)</span><span class="w">
	
</span><span class="n">boxplot</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">vore</span><span class="p">)</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">vore</span><span class="p">)</span><span class="w">

</span><span class="n">levels</span><span class="p">(</span><span class="n">vore</span><span class="p">)</span><span class="w">
</span><span class="n">levels</span><span class="p">(</span><span class="n">vore</span><span class="p">)</span><span class="o">&lt;-</span><span class="nf">c</span><span class="p">(</span><span class="n">levels</span><span class="p">(</span><span class="n">vore</span><span class="p">),</span><span class="s2">"missing"</span><span class="p">)</span><span class="w">
</span><span class="n">vore</span><span class="p">[</span><span class="nf">is.na</span><span class="p">(</span><span class="n">vore</span><span class="p">)]</span><span class="o">&lt;-</span><span class="s2">"missing"</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">vore</span><span class="p">)</span><span class="w">

</span><span class="n">boxplot</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">vore</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Q: How did we handle the missingness on the variable called “vore”?</p>

<p>A: Creating a factor level called “missing.” Especially when the variable is already a categorical variable, creating a category for missing values is a straightforward, assumption-free way to move forward with the analysis without dropping any rows that are missing on that variable. This method ignores any information in the rest of the data about best guesses at those missing values, though, as well as what you know from the context about how the pattern of missingness relates to the missing values.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### Model 1: logsleep by vore</span><span class="w">

</span><span class="c1"># Calculate means of logwt by vore</span><span class="w">
</span><span class="n">by</span><span class="p">(</span><span class="n">logsleep</span><span class="p">,</span><span class="n">vore</span><span class="p">,</span><span class="n">mean</span><span class="p">)</span><span class="w">

</span><span class="c1">#### Run ANOVA of logsleep by vore</span><span class="w">
</span><span class="n">boxplot</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">vore</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">))</span><span class="w">
</span><span class="n">m1.aov</span><span class="o">&lt;-</span><span class="n">aov</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">vore</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">m1.aov</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">m1.aov</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">m1.aov</span><span class="o">$</span><span class="n">resid</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">h</span><span class="o">=</span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">m1.aov</span><span class="o">$</span><span class="n">fitted.values</span><span class="w">
</span><span class="n">temp</span><span class="o">&lt;-</span><span class="n">data.frame</span><span class="p">(</span><span class="n">vore</span><span class="p">,</span><span class="nf">round</span><span class="p">(</span><span class="n">cbind</span><span class="p">(</span><span class="n">logsleep</span><span class="p">,</span><span class="w"> </span><span class="n">m1.aov</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">m1.aov</span><span class="o">$</span><span class="n">resid</span><span class="p">),</span><span class="m">3</span><span class="p">))</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span><span class="o">&lt;-</span><span class="nf">c</span><span class="p">(</span><span class="s2">"vore"</span><span class="p">,</span><span class="s2">"logsleep"</span><span class="p">,</span><span class="s2">"fitted"</span><span class="p">,</span><span class="s2">"resid"</span><span class="p">)</span><span class="w">
</span><span class="n">temp</span><span class="w">

</span><span class="n">SSR.1</span><span class="o">&lt;-</span><span class="nf">sum</span><span class="p">(</span><span class="n">m1.aov</span><span class="o">$</span><span class="n">resid</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">SSR.1</span><span class="w">
</span><span class="n">SST.1</span><span class="o">&lt;-</span><span class="nf">sum</span><span class="p">((</span><span class="n">logsleep</span><span class="o">-</span><span class="n">mean</span><span class="p">(</span><span class="n">logsleep</span><span class="p">))</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">SSM.1</span><span class="o">&lt;-</span><span class="n">SST.1</span><span class="o">-</span><span class="n">SSR.1</span><span class="w">
</span><span class="n">SSM.1</span><span class="w">

</span><span class="c1">#### Run regression of logsleep by vore</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">vore</span><span class="p">,</span><span class="w"> </span><span class="n">logsleep</span><span class="p">,</span><span class="w"> </span><span class="n">ylim</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">))</span><span class="w">
</span><span class="n">m1.lm</span><span class="o">&lt;-</span><span class="n">lm</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">vore</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">m1.lm</span><span class="p">)</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">m1.lm</span><span class="o">$</span><span class="n">resid</span><span class="p">)</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="n">m1.lm</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">m1.lm</span><span class="o">$</span><span class="n">resid</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">h</span><span class="o">=</span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">cbind</span><span class="p">(</span><span class="n">m1.aov</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">m1.lm</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">)</span><span class="w">
</span><span class="n">identical</span><span class="p">(</span><span class="n">m1.aov</span><span class="o">$</span><span class="n">resid</span><span class="p">,</span><span class="n">m1.lm</span><span class="o">$</span><span class="n">resid</span><span class="p">)</span><span class="w">

</span><span class="n">m1.lm</span><span class="o">$</span><span class="n">coef</span><span class="w">
</span><span class="n">m1.aov</span><span class="o">$</span><span class="n">coef</span><span class="w">

</span><span class="n">by</span><span class="p">(</span><span class="n">logsleep</span><span class="p">,</span><span class="n">vore</span><span class="p">,</span><span class="n">mean</span><span class="p">)</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">m1.aov</span><span class="o">$</span><span class="n">resid</span><span class="p">)</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">m1.aov</span><span class="p">)</span><span class="w">
</span><span class="n">anova</span><span class="p">(</span><span class="n">m1.lm</span><span class="p">)</span><span class="w">

</span><span class="c1"># confirm residual standard error</span><span class="w">
</span><span class="n">MSE</span><span class="o">&lt;-</span><span class="n">SSR.1</span><span class="o">/</span><span class="m">78</span><span class="w">
</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">MSE</span><span class="p">)</span><span class="w">
</span><span class="c1"># confirm R^2</span><span class="w">
</span><span class="n">SSM.1</span><span class="o">/</span><span class="n">SST.1</span><span class="w">
</span><span class="m">1</span><span class="o">-</span><span class="n">SSR.1</span><span class="o">/</span><span class="n">SST.1</span><span class="w">
</span><span class="c1"># confirm adjusted R^2</span><span class="w">
</span><span class="m">1</span><span class="o">-</span><span class="p">(</span><span class="n">SSR.1</span><span class="o">/</span><span class="m">78</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">SST.1</span><span class="o">/</span><span class="m">82</span><span class="p">)</span><span class="w">

</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### Model 2: logsleep by logwt</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="n">logwt</span><span class="p">,</span><span class="n">logsleep</span><span class="p">)</span><span class="w">
</span><span class="n">boxplot</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">logwt</span><span class="p">)</span><span class="w">
</span><span class="n">table</span><span class="p">(</span><span class="nf">round</span><span class="p">(</span><span class="n">logwt</span><span class="p">))</span><span class="w">
</span><span class="n">boxplot</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="nf">round</span><span class="p">(</span><span class="n">logwt</span><span class="p">))</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="n">logwt</span><span class="p">,</span><span class="n">logsleep</span><span class="p">)</span><span class="w">


</span><span class="c1">#### Run regression of logsleep by logwt</span><span class="w">
</span><span class="n">m2.lm</span><span class="o">&lt;-</span><span class="n">lm</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">logwt</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">m2.lm</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">m2.lm</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">m2.lm</span><span class="o">$</span><span class="n">resid</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">h</span><span class="o">=</span><span class="m">0</span><span class="p">)</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="n">logwt</span><span class="p">,</span><span class="n">logsleep</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">m2.lm</span><span class="p">)</span><span class="w">

</span><span class="c1">#### Run ANOVA of logsleep by logwt</span><span class="w">
</span><span class="n">m2.aov</span><span class="o">&lt;-</span><span class="n">aov</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">logwt</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">m2.aov</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">m2.aov</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">m2.aov</span><span class="o">$</span><span class="n">resid</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">h</span><span class="o">=</span><span class="m">0</span><span class="p">)</span><span class="w">


</span><span class="n">SSR.2</span><span class="o">&lt;-</span><span class="nf">sum</span><span class="p">(</span><span class="n">m2.lm</span><span class="o">$</span><span class="n">resid</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">SSR.2</span><span class="w">
</span><span class="n">SST.2</span><span class="o">&lt;-</span><span class="nf">sum</span><span class="p">((</span><span class="n">logsleep</span><span class="o">-</span><span class="n">mean</span><span class="p">(</span><span class="n">logsleep</span><span class="p">))</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">SSM.2</span><span class="o">&lt;-</span><span class="n">SST.2</span><span class="o">-</span><span class="n">SSR.2</span><span class="w">
</span><span class="n">SSM.2</span><span class="w">

</span><span class="p">(</span><span class="m">-7.388</span><span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="w">

</span><span class="n">m2.lm</span><span class="o">$</span><span class="n">coef</span><span class="w">
</span><span class="n">m2.aov</span><span class="o">$</span><span class="n">coef</span><span class="w">
</span></code></pre></div></div>

<p><strong>Q: If you run an ANOVA, what is the fitted value of logsleep for the group herbivore?</strong></p>

<p>A: The mean value of logsleep observed for the herbivore group.</p>

<p><strong>Q: How do you get the SSR from an ANOVA output if the ANOVA model is named m1?</strong></p>

<p>A: sum(m1$resid^2)</p>

<p><strong>Q: Which of the following is the Mean Square Error in ANOVA?</strong></p>

<p>A: Sum of Squared Residuals / Residual degrees of freedom</p>

<p><strong>Q:  For a linear model with more than one coefficient specified, what does the p-value for each coefficient show?</strong></p>

<p>A: The p-value for a particular coefficient is the result of a test comparing (i) the actual model that you ran with (ii) the same model with that particular term omitted.</p>

<p><strong>Q: What does the bottom row output of the summary for the linear model “lm” show?</strong></p>

<p>A: The bottom row summarizes an F-test comparing the entire model you specified to the equal means model.</p>

<p><strong>Q:  What is the residual standard error?</strong></p>

<p>A: SquareRoot(SSR/degrees of freedom)</p>

<p><strong>Q: Check all that equal to SSM/SST:</strong></p>

<p>A: R-Squared , 1-SSR/SST</p>

<p><strong>Q: Suppose that the rows in your data set are US counties, and your outcome variable is the total number of people in each county who vote in an election. If your predictor variable is the state in which each county is located, and your research question is whether voting varies across states, which type of output would you rather see?</strong></p>

<p>A: ANOVA. The ANOVA table will provide <strong>one p-value for the entire categorical state variable</strong>, reporting the results of an F-test that compares the equal means model to the model that predicts a separate mean for each state. The default regression output might report the results of the same F-test as an afterthought at the bottom of the output, but the regression output focuses on the separate coefficients for each state.</p>

<p><strong>Q:  In the same context as the previous problem, if you are interested in which states have the highest and lowest numbers of voters, which type of output would you rather see?</strong></p>

<p>A: Regression output. The ANOVA output will evaluate whether the state variable as a whole is useful for predicting vote counts, but the ANOVA table will not report which states have higher or lower vote counts. The regression output, though, includes the estimated coefficients for each state (except for one baseline state), so that you can assess which states have higher or lower predicted values. <strong>Each p-value in the regression output</strong> compares the model where every state has a different mean vote count to the model where every state has a different mean vote count, except that the state associated with that p-value has the same mean vote count as the baseline state. This may not be a particularly interesting test!</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### Model 3: logsleep by logwt and vore</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="n">logwt</span><span class="p">,</span><span class="w"> </span><span class="n">logsleep</span><span class="p">,</span><span class="w">
	</span><span class="n">col</span><span class="o">=</span><span class="n">as.factor</span><span class="p">(</span><span class="n">vore</span><span class="p">))</span><span class="w">
</span><span class="n">boxplot</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="nf">round</span><span class="p">(</span><span class="n">logwt</span><span class="p">)</span><span class="o">+</span><span class="n">vore</span><span class="p">)</span><span class="w">

</span><span class="c1">#### Run ANOVA of logsleep by vore and logwt</span><span class="w">
</span><span class="n">m3.aov</span><span class="o">&lt;-</span><span class="n">aov</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">vore</span><span class="o">+</span><span class="n">logwt</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">m3.aov</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">m3.aov</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">m3.aov</span><span class="o">$</span><span class="n">resid</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">h</span><span class="o">=</span><span class="m">0</span><span class="p">)</span><span class="w">

</span><span class="n">SSR.3</span><span class="o">&lt;-</span><span class="nf">sum</span><span class="p">(</span><span class="n">m3.aov</span><span class="o">$</span><span class="n">resid</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">SSR.3</span><span class="w">
</span><span class="n">SST.3</span><span class="o">&lt;-</span><span class="nf">sum</span><span class="p">((</span><span class="n">logsleep</span><span class="o">-</span><span class="n">mean</span><span class="p">(</span><span class="n">logsleep</span><span class="p">))</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">SSM.3</span><span class="o">&lt;-</span><span class="n">SST.3</span><span class="o">-</span><span class="n">SSR.3</span><span class="w">
</span><span class="n">SSM.3</span><span class="w">

</span><span class="c1">#### Run regression of logsleep by vore and logwt</span><span class="w">
</span><span class="n">m3.lm</span><span class="o">&lt;-</span><span class="n">lm</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">vore</span><span class="o">+</span><span class="n">logwt</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">m3.lm</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">m3.lm</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">m3.lm</span><span class="o">$</span><span class="n">resid</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">h</span><span class="o">=</span><span class="m">0</span><span class="p">)</span><span class="w">

</span><span class="c1"># confirm residual standard error</span><span class="w">
</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">SSR.3</span><span class="o">/</span><span class="m">77</span><span class="p">)</span><span class="w">
</span><span class="c1"># confirm R^2</span><span class="w">
</span><span class="n">SSM.3</span><span class="o">/</span><span class="n">SST.3</span><span class="w">
</span><span class="m">1</span><span class="o">-</span><span class="n">SSR.3</span><span class="o">/</span><span class="n">SST.3</span><span class="w">
</span><span class="c1"># confirm adjusted R^2</span><span class="w">
</span><span class="m">1</span><span class="o">-</span><span class="p">(</span><span class="n">SSR.3</span><span class="o">/</span><span class="m">77</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">SST.3</span><span class="o">/</span><span class="m">82</span><span class="p">)</span><span class="w">

</span><span class="c1"># F-test shown in regression output no longer equivalent to F-tests in ANOVA output</span><span class="w">
</span><span class="c1"># but:</span><span class="w">
</span><span class="p">(</span><span class="m">-7.633</span><span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="w">

</span><span class="n">cbind</span><span class="p">(</span><span class="n">m3.lm</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">m3.aov</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><strong>Q: When there are multiple predictors in the model, can you use the residuals to directly calculate the sum of squared residuals?</strong></p>

<p>A: Yes. The sum of squared residuals is always literally the sum of the squared residuals. Note that the residuals themselves change when we add terms to the model, because the fitted values change.</p>

<p><strong>Q: You are trying to predict a student’s GPA using the sports that a student plays as a categorical variable. You think that some sports have a greater impact than others on a student’s GPA. For example, you think that playing basketball has a larger impact on a student’s GPA than playing field hockey. If you want to test this assumption, and if your research question is about trying to come up with a model that might include some of the possible sports but not all of them in one categorical variable, which model output should you look at?</strong></p>

<p>A: Linear regression. ANOVA will not show the coefficients or significance of individual sports, only a test for the overall correlation of the categorical sport variable with GPA.</p>

<p><strong>Q: If you are trying to decide whether you should include the categorical variable of a Wellesley student’s major in a model determining the student’s future median income, which output’s default would be most useful to the test whether the student’s major is an important predictor?</strong></p>

<p>A: ANOVA. In this case, we are interested in whether the variable as a whole matters, not in comparing specific majors to each other.</p>

<p><strong>Q: When you have multiple predictors, is the F-test shown at the bottom of the Linear Regression output also in the output of the ANOVA?</strong></p>

<p>A: . The F-test in the Linear Regression output compares the entire model to equal means model, while the tests shown in ANOVA table examine each variable individually.</p>

<h3 id="categorical-vs-continous">Categorical vs. continous</h3>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### Categorical v. continuous variables</span><span class="w">

</span><span class="c1"># Continuous variable - mistake to handle as categorical</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">sleep_rem</span><span class="p">)</span><span class="w"> </span><span class="c1"># some missingness, for this section allow rows to drop</span><span class="w">
</span><span class="n">boxplot</span><span class="p">(</span><span class="n">sleep_rem</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">sleep_rem</span><span class="p">,</span><span class="w"> </span><span class="n">logsleep</span><span class="p">)</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">lm</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">sleep_rem</span><span class="p">))</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">aov</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">sleep_rem</span><span class="p">))</span><span class="w">

</span><span class="n">boxplot</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">as.factor</span><span class="p">(</span><span class="n">sleep_rem</span><span class="p">))</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">lm</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">as.factor</span><span class="p">(</span><span class="n">sleep_rem</span><span class="p">)))</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">aov</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">as.factor</span><span class="p">(</span><span class="n">sleep_rem</span><span class="p">)))</span><span class="w">

</span><span class="c1"># Categorical variable - mistake to handle as continuous</span><span class="w">

</span><span class="n">voreAsNum</span><span class="o">&lt;-</span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">vore</span><span class="p">)</span><span class="w">
</span><span class="n">table</span><span class="p">(</span><span class="n">voreAsNum</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">voreAsNum</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">vore</span><span class="p">)</span><span class="w">
</span><span class="n">table</span><span class="p">(</span><span class="n">vore</span><span class="p">,</span><span class="n">voreAsNum</span><span class="p">)</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">lm</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">voreAsNum</span><span class="p">))</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">aov</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">voreAsNum</span><span class="p">))</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="n">voreAsNum</span><span class="p">,</span><span class="n">logsleep</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">lm</span><span class="p">(</span><span class="n">logsleep</span><span class="o">~</span><span class="n">voreAsNum</span><span class="p">))</span><span class="w">

</span></code></pre></div></div>
<h3 id="qa-section">Q&amp;A Section</h3>

<p><strong>Q: What is one way to tell that we incorrectly handled a continuous variable as a factor or categorical in an ANOVA?</strong></p>

<p>A: The degrees of freedom is not 1. A continuous variable will have a degrees of freedom of 1. On the other hand, if your categorical variable has more than one category and the degrees of freedom is shown to be 1, then you will know that the variable was incorrectly treated as continuous.</p>

<p><strong>Q: Suppose you are trying to predict height and your model includes a variable for the length of an individual’s left foot and a variable for the length of an individual’s right foot. When you run a linear regression on this model, which of the following tests will likely be significant? Check all that apply.</strong></p>

<p>A: The F-test at the bottom of the linear output will be significant because the model you are testing is more appropriate than the equal means model. However, the t-test associated with the left foot coefficient compares a model with only the right foot to the model with both feet - the feet are very correlated, so the right foot is good enough, and the p-value is large. The t-test associated with the right foot coefficient compares a model with only the left foot to the model with both feet - the left foot is good enough, and so the p-value is large. <strong>When you put two correlated variables in a model as predictors, the individual p-values for the coefficients will not be significant, because a model that only includes the other predictor is fine.</strong> However, these large p-values do not imply that the information in these variables is not important. Either left foot or right foot would be significant if only one of them is included in the model.</p>

<p><strong>Q: Would it be sufficient to run a linear regression with several predictors and then omit the variables that are not significant?</strong></p>

<p>A: No, the variables that are not significant could be important, but perhaps they are correlated with other predictors that you included in the model.</p>

<p><strong>Q: Consider two predictor variables that, individually, would be significant for predicting an outcome variable. These predictor variables are highly correlated with one another. What will we see from an ANOVA output when we run, in one model, these two variables as predictors for the outcome variable?</strong></p>

<p>A: The variable specified first would be significant and the variable specified second would not be significant. The default in R is that order matters in an ANOVA output. Therefore, the variable specified first will be statistically significant.</p>

<p><strong>Q: Given the msleep data, suppose that you run a linear model to predict logsleep. You specify the predictors logwt and vore, in that order, with no interaction. Which of the following tests will be reported as part of the default regression output, in R?</strong></p>

<p>A:</p>

<ul>
  <li>Comparison between equal means model and model that includes logwt and vore</li>
  <li>Comparison between model that includes both logwt and vore, and model that includes only vore</li>
  <li>Comparison between model that includes both logwt and vore, and model that includes both logwt and vore but assumes that herbivores have the same mean log sleep as the baseline vore (say, carnivores)</li>
</ul>

<p><strong>Q: which of the following tests will be reported as part of the default ANOVA output, in R?</strong></p>

<p>A: Comparison between model that includes both logwt and vore, and model that includes only logwt:  is the test in the row labeled “vore” in the ANOVA output. There is no such row in the regression output, because separate tests for the coefficients of each level of the categorical variable (except for one baseline level) are shown on different rows.</p>

<wrong answers="">

- Comparison between equal means model and model that includes logwt and vore: the F-test shown at the bottom row of the regression output. If there is only one predictor, the bottom row of the regression output shows the same F-test that is shown in the corresponding ANOVA table. If there are multiple predictors, the bottom row of the regression output shows an F-test that is not equivalent to anything shown in the default ANOVA table.
- Comparison between model that includes both logwt and vore, and model that includes only vore:  is the test in the row labeled "logwt" in the regression output. This test actually does not appear in the ANOVA if the predictors are specified in the order given here, but it would have if the predictors had been specified in the opposite order
- Comparison between model that includes both logwt and vore, and model that includes both logwt and vore but assumes that herbivores have the same mean log sleep as the baseline vore (say, carnivores):  is the test in the row labeled "herbi" in the regression output. There is no such row in the ANOVA table, because the ANOVA reports tests of the entire categorical variable rather than coefficients for specific levels of the categorical variable.

Q: For which of the types of R output does the order of the predictors determine the tests that are reported?


A: ANOVA. The regression output will always show the results of tests comparing the entire model, to the entire model without each predictor. R's default ANOVA output will built up the predictors one by one, testing whether the first predictor alone is better than the equal means model; whether the first two predictors together are better than the first predictor alone; whether the first three predictors together are better than the first two predictors together; etc. Though it seems strange that the output would depend on the variable order, the tests shown in this ANOVA output are more likely to show us whether we have important predictors in the data set. If two predictors are highly correlated with each other and with the outcome, the tests shown in the linear model for each of the predictors may not be significant, because including just one of the two predictors is sufficient (aka "multicollinearity").


</wrong>]]></content><author><name>Johanna</name><email>hl105@wellesley.edu</email></author><category term="stats" /><category term="QAI" /><category term="statistics" /><category term="R" /><category term="ANOVA" /><category term="regression" /><summary type="html"><![CDATA[notes from week 7]]></summary></entry></feed>